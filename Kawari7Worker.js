// Generated by CoffeeScript 1.8.0
var FS, Module, shiori;

self.importScripts("vender/encoding.min.js");

self.importScripts("vender/kawari7.js");

self.importScripts("vender/kawari7shiori.js");

shiori = new Kawari7Shiori();

Module = shiori.Module;

FS = shiori.FS;

Module['logReadFiles'] = true;

self.onmessage = function(_arg) {
  var data, directory, dirname, err, event, filepath, request, response, uint8arr, _i, _len, _ref, _ref1;
  _ref = _arg.data, event = _ref.event, data = _ref.data;
  switch (event) {
    case "load":
      directory = data;
      _ref1 = Object.keys(directory);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        filepath = _ref1[_i];
        dirname = filepath.replace(/[^\/]*$/, '');
        try {
          FS.stat("/home/web_user/" + dirname);
        } catch (_error) {
          err = _error;
          console.log('mkdir ' + "/home/web_user/" + dirname);
          FS.mkdir("/home/web_user/" + dirname.replace(/\/$/, ""));
        }
        if (!/\/$/.test(filepath)) {
          uint8arr = new Uint8Array(directory[filepath]);
          console.log("/home/web_user/" + filepath, uint8arr.length);
          FS.writeFile("/home/web_user/" + filepath, uint8arr, {
            encoding: 'binary'
          });
        }
      }
      FS.chdir('/home/web_user');
      console.log(shiori.load("/home/web_user/"));
      return self.postMessage({
        "event": "loaded",
        "error": null
      });
    case "request":
      request = data;
      response = shiori.request(request);
      return self.postMessage({
        event: "response",
        error: null,
        data: response
      });
    case "unload":
      console.log(shiori.unload());
      return self.postMessage({
        event: "unloaded",
        error: null
      });
    default:
      throw new Error(event + " event not support");
  }
};
