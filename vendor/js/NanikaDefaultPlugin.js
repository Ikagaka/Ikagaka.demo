// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var NanikaPlugin;

  NanikaPlugin = this.NanikaPlugin;

  if (NanikaPlugin == null) {
    NanikaPlugin = {};
  }

  NanikaPlugin.notify_browser_info = {
    initialize: function(nanika) {
      var notifybrowserinfo;
      notifybrowserinfo = function() {
        var args, browser, browser_version, info, info2, null2empty, parser, v;
        parser = new UAParser();
        info = parser.getResult();
        info2 = useragent_parser.parse(info.ua);
        switch (info2.family) {
          case "ANTGalio":
          case "Demeter":
          case "Fluid":
          case "Fresco":
          case "Galeon":
          case "GranParadiso":
          case "Iris":
          case "Kazehakase":
          case "Lobo":
          case "NetNewsWire":
          case "Shiira":
          case "Sleipnir":
          case "Sunrise":
          case "Vienna":
          case "Vodafone":
          case "WebPilot":
          case "IBrowse":
          case "Orca":
          case "Space Bison":
          case "Stainless":
            browser_version = ((function() {
              var _i, _len, _ref, _results;
              _ref = [info2.v1, info2.v2, info2.v3];
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                v = _ref[_i];
                if (v != null) {
                  _results.push(v);
                }
              }
              return _results;
            })()).join('.');
            browser = {
              name: info2.family,
              version: browser_version
            };
            break;
          default:
            browser = info.browser;
        }
        null2empty = function(value) {
          if (value != null) {
            return value;
          } else {
            return '';
          }
        };
        args = {
          useragent: null2empty(info.ua),
          browser_name: null2empty(browser.name),
          browser_version: null2empty(browser.version),
          engine_name: null2empty(info.engine.name),
          engine_version: null2empty(info.engine.version),
          os_name: null2empty(info.os.name),
          os_version: null2empty(info.os.version),
          device_model: null2empty(info.device.name),
          device_type: null2empty(info.device.type),
          device_vendor: null2empty(info.device.vendor),
          cpu_arch: null2empty(info.cpu.architecture)
        };
        return nanika.request('notifybrowserinfo', args);
      };
      return nanika.on('version.set', notifybrowserinfo);
    }
  };

  this.NanikaPlugin = NanikaPlugin;

}).call(this);
// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var NanikaPlugin;

  NanikaPlugin = this.NanikaPlugin;

  if (NanikaPlugin == null) {
    NanikaPlugin = {};
  }

  NanikaPlugin.choice_anchor = {
    initialize: function(nanika) {
      return nanika.on('materialized', function() {
        nanika.named.on('choiceselect', function(event) {
          if (/^On/.test(event.id)) {
            return nanika.request('any', {
              id: event.id,
              headers: event.args
            });
          } else if (/^script:/.test(event.id)) {
            return nanika.ssp.play(event.id.replace(/^script:/, ''));
          } else if (event.args.length) {
            return nanika.request('choiceselectex', {
              id: event.id,
              label: event.text,
              args: event.args
            });
          } else {
            return nanika.request('choiceselectex', {
              id: event.id,
              label: event.text
            }, function(response_args, response) {
              if ((response_args.value == null) || !response_args.value.length) {
                return nanika.request('choiceselect', {
                  id: event.id
                });
              }
            });
          }
        });
        return nanika.named.on('anchorselect', (function(_this) {
          return function(event) {
            if (/^On/.test(event.id)) {
              return nanika.request('any', {
                id: event.id,
                headers: event.args
              });
            } else if (event.args.length) {
              return nanika.request('anchorselectex', {
                id: event.id,
                label: event.text,
                args: event.args
              });
            } else {
              return nanika.request('anchorselectex', {
                id: event.id,
                label: event.text
              }, function(response_args, response) {
                if ((response_args.value == null) || !response_args.value.length) {
                  return nanika.request('anchorselect', {
                    id: event.id
                  });
                }
              });
            }
          };
        })(this));
      });
    }
  };

  this.NanikaPlugin = NanikaPlugin;

}).call(this);
// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var NanikaPlugin;

  NanikaPlugin = this.NanikaPlugin;

  if (NanikaPlugin == null) {
    NanikaPlugin = {};
  }

  NanikaPlugin.communicate = {
    initialize: function(nanika) {
      return nanika.on('materialized', function() {
        return nanika.on('ssp.finish', function(response_args, response) {
          var args, index, name, result, value;
          if (response_args.Reference0 != null) {
            args = [];
            for (name in response_args) {
              value = response_args[name];
              if (result = name.match(/^Reference(\d+)$/)) {
                index = result[1] - 1;
                if (index) {
                  args[index] = value;
                }
              }
            }
            return nanika.nanikamanager.communicate(nanika.ghost.descript.sakuraname, response_args.Reference0, response_args.value, args, response_args.Age, response_args.Surface);
          }
        });
      });
    }
  };

  this.NanikaPlugin = NanikaPlugin;

}).call(this);
// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var NanikaPlugin, string_header;

  NanikaPlugin = this.NanikaPlugin;

  if (NanikaPlugin == null) {
    NanikaPlugin = {};
  }

  string_header = function(version) {
    if (version === '3.0') {
      return 'Value';
    } else {
      return 'String';
    }
  };

  NanikaPlugin.get_info = {
    initialize: function(nanika) {
      nanika.on('version.set', function() {
        return nanika.request('username', null, function(args) {
          return nanika.resource.username = args.value;
        });
      });
      nanika.on('version.set', function() {
        return nanika.request('sakura.recommendsites', null, function(args, response) {
          return nanika.resource["sakura.recommendsites"] = response.headers.get_separated2(string_header(nanika.protocol_version));
        });
      });
      nanika.on('version.set', function() {
        return nanika.request('sakura.portalsites', null, function(args, response) {
          return nanika.resource["sakura.portalsites"] = response.headers.get_separated2(string_header(nanika.protocol_version));
        });
      });
      return nanika.on('version.set', function() {
        return nanika.request('kero.recommendsites', null, function(args, response) {
          return nanika.resource["kero.recommendsites"] = response.headers.get_separated2(string_header(nanika.protocol_version));
        });
      });
    }
  };

  this.NanikaPlugin = NanikaPlugin;

}).call(this);
// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var NanikaPlugin;

  NanikaPlugin = this.NanikaPlugin;

  if (NanikaPlugin == null) {
    NanikaPlugin = {};
  }

  NanikaPlugin.input = {
    initialize: function(nanika) {
      return nanika.on('materialized', function() {
        nanika.named.on('userinput', function(event) {
          if (event.content != null) {
            return nanika.request('userinput', {
              id: event.id,
              content: event.content
            });
          } else {
            return nanika.request('userinputcancel', {
              id: event.id,
              reason: 'close'
            });
          }
        });
        return nanika.named.on('communicateinput', function(event) {
          if (event.content != null) {
            return nanika.request('communicate', {
              sender: 'user',
              content: event.content
            });
          } else {
            return nanika.request('communicateinputcancel', {
              reason: 'cancel'
            });
          }
        });
      });
    }
  };

  this.NanikaPlugin = NanikaPlugin;

}).call(this);
// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var NanikaPlugin;

  NanikaPlugin = this.NanikaPlugin;

  if (NanikaPlugin == null) {
    NanikaPlugin = {};
  }

  NanikaPlugin.mouse = {
    initialize: function(nanika) {
      return nanika.on('materialized', function() {
        var event_id, mouseevents, _i, _len, _results;
        mouseevents = ['mousedown', 'mousemove', 'mouseup', 'mouseclick', 'mousedblclick'];
        _results = [];
        for (_i = 0, _len = mouseevents.length; _i < _len; _i++) {
          event_id = mouseevents[_i];
          _results.push(nanika.named.on(event_id, (function(event_id) {
            return function(event) {
              return nanika.request(event_id, event);
            };
          })(event_id)));
        }
        return _results;
      });
    }
  };

  this.NanikaPlugin = NanikaPlugin;

}).call(this);
// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var NanikaPlugin;

  NanikaPlugin = this.NanikaPlugin;

  if (NanikaPlugin == null) {
    NanikaPlugin = {};
  }

  NanikaPlugin.notify_info = {
    initialize: function(nanika) {
      var balloonpathlist, basewareversion, ghostpathlist, installedballoonname, installedghostname, installedshellname, notifyballooninfo, notifydressupinfo, notifyfontinfo, notifyosinfo, notifyselfinfo, notifyshellinfo, notifyuserinfo, otherghostname, ownerghostname, rateofusegraph, uniqueid;
      ownerghostname = function() {
        return nanika.request('ownerghostname', {
          name: nanika.ghost.descript.name
        });
      };
      otherghostname = function() {
        var names;
        names = Object.keys(nanika.nanikamanager.nanikas).map(function(dirpath) {
          return nanika.nanikamanager.nanikas[dirpath].ghost.descript.name;
        }).filter(function(name) {
          return name !== nanika.ghost.descript.name;
        });
        return nanika.request('otherghostname', {
          names: names
        });
      };
      basewareversion = function() {
        var id, version;
        version = '0.0.0';
        id = 'Ikagaka';
        return nanika.request('basewareversion', {
          version: version,
          id: id
        });
      };
      notifyosinfo = function() {};
      notifyfontinfo = function() {};
      notifyselfinfo = function() {
        return nanika.request('notifyselfinfo', {
          name: nanika.ghost.descript.name,
          sakura_name: nanika.ghost.descript['sakura.name'],
          kero_name: nanika.ghost.descript['kero.name'],
          shell_name: nanika.named.shell.descript['name'],
          shell_path: null,
          balloon_name: nanika.named.balloon.descript['name'],
          balloon_path: null
        });
      };
      notifyballooninfo = function() {
        return nanika.request('notifyballooninfo', {
          balloon_name: nanika.named.balloon.descript['name'],
          balloon_path: null,
          surfaces: null
        });
      };
      notifyshellinfo = function() {
        return nanika.request('notifyshellinfo', {
          shell_name: nanika.named.shell.descript['name'],
          shell_path: null,
          surfaces: null
        });
      };
      notifyuserinfo = function() {};
      notifydressupinfo = function() {};
      ghostpathlist = function() {};
      balloonpathlist = function() {};
      installedghostname = function() {
        return nanika.request('installedghostname', {
          names: Object.keys(nanika.storage.ghosts).map(function(dirpath) {
            return nanika.storage.ghosts[dirpath].install.name;
          })
        });
      };
      installedballoonname = function() {
        return nanika.request('installedballoonname', {
          names: Object.keys(nanika.storage.balloons).map(function(dirpath) {
            return nanika.storage.balloons[dirpath].install.name;
          })
        });
      };
      installedshellname = function() {
        var dir, name, shell, shelldirs, shellnames, _i, _len, _ref;
        shell = nanika.storage.ghost(nanika.ghostpath).getDirectory('shell');
        shelldirs = shell.listChildren();
        shellnames = [];
        for (_i = 0, _len = shelldirs.length; _i < _len; _i++) {
          dir = shelldirs[_i];
          name = (_ref = shell.getDirectory(dir).descript) != null ? _ref.name : void 0;
          if (name != null) {
            shellnames.push(name);
          }
        }
        return nanika.request('installedshellname', {
          names: shellnames
        });
      };
      rateofusegraph = function() {};
      uniqueid = function() {};
      nanika.on('version.set', ownerghostname);
      nanika.on('version.set', otherghostname);
      nanika.on('version.set', basewareversion);
      nanika.on('version.set', notifyosinfo);
      nanika.on('version.set', notifyfontinfo);
      nanika.on('version.set', notifyselfinfo);
      nanika.on('version.set', notifyballooninfo);
      nanika.on('version.set', notifyshellinfo);
      nanika.on('version.set', notifyuserinfo);
      nanika.on('version.set', notifydressupinfo);
      nanika.on('version.set', ghostpathlist);
      nanika.on('version.set', balloonpathlist);
      nanika.on('version.set', installedghostname);
      nanika.on('version.set', installedballoonname);
      nanika.on('version.set', installedshellname);
      nanika.on('version.set', rateofusegraph);
      return nanika.on('version.set', uniqueid);
    }
  };

  this.NanikaPlugin = NanikaPlugin;

}).call(this);
// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var NanikaPlugin,
    __slice = [].slice;

  NanikaPlugin = this.NanikaPlugin;

  if (NanikaPlugin == null) {
    NanikaPlugin = {};
  }

  NanikaPlugin.ssp = {
    initialize: function(nanika) {
      return nanika.on('materialized', function() {
        nanika.ssp.on('script:raise', function(_arg) {
          var args, id;
          id = _arg[0], args = 2 <= _arg.length ? __slice.call(_arg, 1) : [];
          return nanika.request('any', {
            id: id,
            headers: args
          });
        });
        return nanika.ssp.on('script:halt', function() {
          return nanika.halt('ssp.script.halt');
        });
      });
    }
  };

  this.NanikaPlugin = NanikaPlugin;

}).call(this);
// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var NanikaPlugin;

  NanikaPlugin = this.NanikaPlugin;

  if (NanikaPlugin == null) {
    NanikaPlugin = {};
  }

  NanikaPlugin.time = {
    initialize: function(nanika) {
      var id_minutechange, id_secondchange, init_minutechange, init_secondchange;
      id_secondchange = null;
      init_secondchange = function() {
        if (id_secondchange != null) {
          return;
        }
        id_secondchange = setInterval((function(_this) {
          return function() {
            var uptime;
            uptime = 0;
            return nanika.request('secondchange', {
              os_uptime: Math.floor(uptime / 3600),
              mikire: false,
              overlapped: false,
              cantalk: true
            });
          };
        })(this), 1000);
        return nanika.on('halt', function() {
          return clearInterval(id_secondchange);
        });
      };
      nanika.on('response.boot', init_secondchange);
      nanika.on('response.changed', init_secondchange);
      nanika.on('response.called', init_secondchange);
      id_minutechange = null;
      init_minutechange = function() {
        if (id_minutechange != null) {
          return;
        }
        if ((new Date).getSeconds() === 0) {
          nanika.off('response.secondchange', init_minutechange);
        } else {
          return;
        }
        id_minutechange = setInterval((function(_this) {
          return function() {
            var uptime;
            uptime = 0;
            return nanika.request('minutechange', {
              os_uptime: Math.floor(uptime / 3600),
              mikire: false,
              overlapped: false,
              cantalk: true
            });
          };
        })(this), 60000);
        return nanika.on('halt', function() {
          return clearInterval(id_minutechange);
        });
      };
      return nanika.on('request.secondchange', init_minutechange);
    }
  };

  this.NanikaPlugin = NanikaPlugin;

}).call(this);
// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var NanikaPlugin;

  NanikaPlugin = this.NanikaPlugin;

  if (NanikaPlugin == null) {
    NanikaPlugin = {};
  }

  NanikaPlugin.version = {
    initialize: function(nanika) {
      return nanika.on('materialized', function() {
        return nanika.request('version', null, function(response_args, response) {
          if (response.status_line.code === 200 && response.status_line.version !== '3.0') {
            nanika.protocol_version = '2.6';
            nanika.resource.version = response.headers.header.Version;
            nanika.resource.name = response.headers.header.ID;
            nanika.resource.craftman = response.headers.header.Craftman;
            nanika.resource.craftmanw = response.headers.header.Craftman;
          } else {
            nanika.protocol_version = '3.0';
            nanika.request('version', null, function(response_args) {
              return nanika.resource.version = response_args.value;
            });
            nanika.request('name', null, function(response_args) {
              return nanika.resource.name = response_args.value;
            });
            nanika.request('craftman', null, function(response_args) {
              return nanika.resource.craftman = response_args.value;
            });
            nanika.request('craftmanw', null, function(response_args) {
              return nanika.resource.craftmanw = response_args.value;
            });
          }
          return nanika.emit('version.set');
        });
      });
    }
  };

  this.NanikaPlugin = NanikaPlugin;

}).call(this);
