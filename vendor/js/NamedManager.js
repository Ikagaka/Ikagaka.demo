// Generated by CoffeeScript 1.7.1
(function() {
  var NamedManager, Scope, _ref;

  Scope = window["Named"] || ((_ref = window["Ikagaka"]) != null ? _ref["Named"] : void 0) || require("./Named.js");

  NamedManager = (function() {
    function NamedManager() {
      this.$namedMgr = $("<div />").addClass("namedMgr");
      this.element = this.$namedMgr[0];
      this.namedies = [];
      this.destructors = [];
      (function(_this) {
        return (function() {
          var onmousedown;
          onmousedown = function(ev) {
            return setTimeout((function() {
              return _this.$namedMgr.append(ev.currentTarget);
            }), 100);
          };
          _this.$namedMgr.on("mousedown", ".named", onmousedown);
          return _this.destructors.push(function() {
            return _this.$namedMgr.off("mousedown", ".named", onmousedown);
          });
        });
      })(this)();
    }

    NamedManager.prototype.destructor = function() {
      this.namedies.filter(function(named) {
        return named != null;
      }).forEach(function(named) {
        return $(named.element).remove();
      });
      this.destructors.forEach(function(destructor) {
        return destructor();
      });
      this.$namedMgr.remove();
    };

    NamedManager.prototype.materialize = function(shell, balloon) {
      var named;
      named = new Named(shell, balloon);
      this.namedies.push(named);
      this.$namedMgr.append(named.element);
      return this.namedies.length - 1;
    };

    NamedManager.prototype.vanish = function(namedId) {
      if (this.namedies[namedId] == null) {
        throw new Error("namedId " + namedId + " is not used yet");
      }
      this.namedies[namedId].destructor();
      this.namedies[namedId] = null;
    };

    NamedManager.prototype.named = function(namedId) {
      if (this.namedies[namedId] == null) {
        throw new Error("namedId " + namedId + " is not used yet");
      }
      return this.namedies[namedId];
    };

    return NamedManager;

  })();

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = NamedManager;
  } else if (this.Ikagaka != null) {
    this.Ikagaka.NamedManager = NamedManager;
  } else {
    this.NamedManager = NamedManager;
  }

}).call(this);
