// Generated by CoffeeScript 1.8.0
(function() {
  var $, Scope,
    __slice = [].slice;

  $ = window["Zepto"];

  Scope = (function() {
    function Scope(scopeId, shell, balloon) {
      var $style;
      this.scopeId = scopeId;
      this.shell = shell;
      this.balloon = balloon;
      this.$scope = $("<div />").addClass("scope");
      $style = $("<style scoped />").html(this.style);
      this.$surface = $("<div />").addClass("surface");
      this.$surfaceCanvas = $("<canvas width='10' height='100' />").addClass("surfaceCanvas");
      this.$blimp = $("<div />").addClass("blimp");
      this.$blimpCanvas = $("<canvas width='0' height='0' />").addClass("blimpCanvas");
      this.$blimpText = $("<div />").addClass("blimpText");
      this.$surface.append(this.$surfaceCanvas);
      this.$blimp.append(this.$blimpCanvas);
      this.$blimp.append(this.$blimpText);
      this.$scope.append($style);
      this.$scope.append(this.$surface);
      this.$scope.append(this.$blimp);
      this.element = this.$scope[0];
      this.destructors = [];
      this.currentSurface = null;
      this.currentBalloon = null;
      this.isBalloonLeft = true;
      this.talkInsertPointStack = [this.$blimpText];
      this.insertPoint = this.$blimpText;
      this.$scope.css({
        "bottom": "0px",
        "right": (this.scopeId * 240) + "px"
      });
      this.surface(0);
      setTimeout((function(_this) {
        return function() {
          _this.surface(0);
          _this.blimp(0);
          _this.$surface.hide();
          return _this.$blimp.hide();
        };
      })(this));
    }

    Scope.prototype.surface = function(surfaceId) {
      var tmp, type;
      type = this.scopeId === 0 ? "sakura" : "kero";
      if (surfaceId != null) {
        if (surfaceId === -1) {
          this.$surface.hide();
        } else {
          this.$surface.show();
        }
        if (!!this.currentSurface) {
          this.currentSurface.destructor();
        }
        tmp = this.shell.attachSurface(this.$surfaceCanvas[0], this.scopeId, surfaceId);
        if (!!tmp) {
          this.currentSurface = tmp;
        }
        this.$scope.width(this.$surfaceCanvas.width());
        this.$scope.height(this.$surfaceCanvas.height());
      }
      return this.currentSurface;
    };

    Scope.prototype.blimp = function(balloonId) {
      var b, descript, h, l, r, t, type, w;
      type = this.scopeId === 0 ? "sakura" : "kero";
      if (balloonId != null) {
        if (balloonId === -1) {
          this.$blimp.hide();
        } else {
          this.$blimp.show();
        }
        if (!!this.currentBalloon) {
          this.currentBalloon.destructor();
        }
        this.currentBalloon = this.balloon.attachSurface(this.$blimpCanvas[0], this.scopeId, balloonId);
        if (!!this.currentBalloon) {
          descript = this.currentBalloon.descript;
          this.$blimp.css({
            "width": this.$blimpCanvas.width(),
            "height": this.$blimpCanvas.height()
          });
          this.$blimp.css({
            "top": Number(this.shell.descript["" + type + ".balloon.offsety"] || 0)
          });
          if (this.isBalloonLeft) {
            this.$blimp.css({
              "left": Number(this.shell.descript["" + type + ".balloon.offsetx"] || 0) + -1 * this.$blimpCanvas.width()
            });
          } else {
            this.$blimp.css({
              "left": Number(this.shell.descript["" + type + ".balloon.offsetx"] || 0) + this.$surfaceCanvas.width()
            });
          }
          t = descript["origin.y"] || descript["validrect.top"] || "10";
          r = descript["validrect.right"] || "10";
          b = descript["validrect.bottom"] || "10";
          l = descript["origin.x"] || descript["validrect.left"] || "10";
          w = this.$blimpCanvas.width();
          h = this.$blimpCanvas.height();
          this.$blimpText.css({
            "top": "" + t + "px",
            "left": "" + l + "px",
            "width": "" + (w - (Number(l) + Number(r))) + "px",
            "height": "" + (h - (Number(t) - Number(b))) + "px"
          });
        }
      }
      return {
        anchorBegin: (function(_this) {
          return function() {
            var a, args, argv, id, index, _i, _id, _len;
            id = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            _this.$blimp.show();
            _id = $(document.createElement("div")).text(id).html();
            a = $("<a />").addClass("ikagaka-anchor").attr("data-id", _id).attr("data-argc", args.length);
            for (index = _i = 0, _len = args.length; _i < _len; index = ++_i) {
              argv = args[index];
              a.attr("data-argv" + index, argv);
            }
            _this.insertPoint = a.appendTo(_this.$blimpText);
          };
        })(this),
        anchorEnd: (function(_this) {
          return function() {
            _this.insertPoint = _this.$blimpText;
          };
        })(this),
        choice: (function(_this) {
          return function() {
            var a, args, argv, id, index, text, _i, _id, _len, _text;
            text = arguments[0], id = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
            _this.$blimp.show();
            _text = $(document.createElement("div")).text(text).html();
            _id = $(document.createElement("div")).text(id).html();
            a = $("<a />").addClass("ikagaka-choice").html(_text).attr("data-id", _id).attr("data-argc", args.length);
            for (index = _i = 0, _len = args.length; _i < _len; index = ++_i) {
              argv = args[index];
              a.attr("data-argv" + index, argv);
            }
            a.appendTo(_this.insertPoint);
          };
        })(this),
        choiceBegin: (function(_this) {
          return function() {
            var a, args, argv, id, index, _i, _id, _len;
            id = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            _this.$blimp.show();
            _id = $(document.createElement("div")).text(id).html();
            a = $("<a />").addClass("ikagaka-choice").attr("data-id", _id).attr("data-argc", args.length);
            for (index = _i = 0, _len = args.length; _i < _len; index = ++_i) {
              argv = args[index];
              a.attr("data-argv" + index, argv);
            }
            _this.insertPoint = a.appendTo(_this.$blimpText);
          };
        })(this),
        choiceEnd: (function(_this) {
          return function() {
            _this.insertPoint = _this.$blimpText;
          };
        })(this),
        talk: (function(_this) {
          return function(text) {
            var _text;
            _text = $(document.createElement("div")).text(text).html();
            if (!!_this.currentSurface) {
              _this.currentSurface.talk();
            }
            _this.$blimp.show();
            _this.insertPoint.html(_this.insertPoint.html() + _text);
            _this.$blimpText[0].scrollTop = 999;
          };
        })(this),
        clear: (function(_this) {
          return function() {
            _this.insertPoint = _this.$blimpText;
            _this.$blimpText.html("");
          };
        })(this),
        br: (function(_this) {
          return function() {
            _this.insertPoint.html(_this.insertPoint.html() + "<br />");
          };
        })(this)
      };
    };

    Scope.prototype.style = ".scope {\n  position: absolute;\n  pointer-events: none;\n  user-select: none;\n  -webkit-tap-highlight-color: transparent;\n}\n.surface {}\n.surfaceCanvas {\n  pointer-events: auto;\n}\n.blimp {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  pointer-events: auto;\n}\n.blimpCanvas {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n}\n.blimpText {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  overflow-y: scroll;\n  white-space: pre;\n  white-space: pre-wrap;\n  white-space: pre-line;\n  word-wrap: break-word;\n}\n.blimpText a {\n  text-decoration: underline;\n  cursor: pointer;\n}\n.blimpText a:hover { background-color: yellow; }\n.blimpText a.ikagaka-choice { color: blue; }\n.blimpText a.ikagaka-anchor { color: red; }";

    return Scope;

  })();

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = Scope;
  } else if (this.Ikagaka != null) {
    this.Ikagaka.Scope = Scope;
  } else {
    this.Scope = Scope;
  }

}).call(this);
