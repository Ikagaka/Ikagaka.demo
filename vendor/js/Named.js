// Generated by CoffeeScript 1.8.0
(function() {
  var $, Named, Scope, prompt, _ref,
    __slice = [].slice;

  $ = window["Zepto"];

  Scope = window["Scope"] || ((_ref = window["Ikagaka"]) != null ? _ref["Scope"] : void 0) || require("./Scope.js");

  prompt = window["prompt"];

  Named = (function() {
    function Named(shell, balloon) {
      this.shell = shell;
      this.balloon = balloon;
      this.$named = $("<div />").addClass("named");
      this.element = this.$named[0];
      this.scopes = [];
      this.currentScope = null;
      this.destructors = [];
      this.listener = {};
    }

    Named.prototype.load = function() {
      this.scopes[0] = this.scope(0);
      this.currentScope = this.scopes[0];
      $(this.element).on("IkagakaDOMEvent", (function(_this) {
        return function(_arg) {
          var event;
          event = _arg.detail;
          return _this.trigger(event.type, event);
        };
      })(this));
      (function(_this) {
        return (function() {
          var $body, $target, onmousedown, onmousemove, onmouseup, relLeft, relTop;
          $target = null;
          relLeft = relTop = 0;
          onmouseup = function(ev) {
            var _ref1, _ref2;
            if (!!$target) {
              if ($(ev.target).hasClass("blimpText") || $(ev.target).hasClass("blimpCanvas")) {
                if ($target[0] === ((_ref1 = $(ev.target).parent()) != null ? _ref1[0] : void 0)) {
                  return $target = null;
                }
              } else if ($(ev.target).hasClass("surfaceCanvas")) {
                if ($target[0] === ((_ref2 = $(ev.target).parent().parent()) != null ? _ref2[0] : void 0)) {
                  return $target = null;
                }
              }
            }
          };
          onmousedown = function(ev) {
            var $scope, left, offsetX, offsetY, pageX, pageY, top, _ref1, _ref2, _ref3, _ref4;
            if ($(ev.target).hasClass("blimpText") || $(ev.target).hasClass("blimpCanvas")) {
              if (((_ref1 = $(ev.target).parent().parent().parent()) != null ? _ref1[0] : void 0) === _this.element) {
                $target = $(ev.target).parent();
                $scope = $target.parent();
                _ref2 = $target.offset(), top = _ref2.top, left = _ref2.left;
                offsetY = parseInt($target.css("left"), 10);
                offsetX = parseInt($target.css("top"), 10);
                if (/^touch/.test(ev.type)) {
                  pageX = ev.touches[0].pageX;
                  pageY = ev.touches[0].pageY;
                } else {
                  pageX = ev.pageX;
                  pageY = ev.pageY;
                }
                relLeft = pageX - offsetY;
                relTop = pageY - offsetX;
                return setTimeout((function() {
                  return _this.$named.append($scope);
                }), 200);
              }
            } else if ($(ev.target).hasClass("surfaceCanvas")) {
              if (((_ref3 = $(ev.target).parent().parent().parent()) != null ? _ref3[0] : void 0) === _this.element) {
                $scope = $target = $(ev.target).parent().parent();
                _ref4 = $target.offset(), top = _ref4.top, left = _ref4.left;
                if (/^touch/.test(ev.type)) {
                  pageX = ev.touches[0].pageX;
                  pageY = ev.touches[0].pageY;
                } else {
                  pageX = ev.pageX;
                  pageY = ev.pageY;
                }
                relLeft = pageX - left;
                relTop = pageY - top;
                return setTimeout((function() {
                  return _this.$named.append($scope);
                }), 200);
              }
            }
          };
          onmousemove = function(ev) {
            var pageX, pageY;
            if (!!$target) {
              if (/^touch/.test(ev.type)) {
                pageX = ev.touches[0].pageX;
                pageY = ev.touches[0].pageY;
              } else {
                pageX = ev.pageX;
                pageY = ev.pageY;
              }
              return $target.css({
                left: pageX - relLeft,
                top: pageY - relTop
              });
            }
          };
          $body = $("body");
          $body.on("mousedown", onmousedown);
          $body.on("mousemove", onmousemove);
          $body.on("mouseup", onmouseup);
          $body.on("touchstart", onmousedown);
          $body.on("touchmove", onmousemove);
          $body.on("touchend", onmouseup);
          return _this.destructors.push(function() {
            $body.off("mousedown", onmousedown);
            $body.off("mousemove", onmousemove);
            $body.off("mouseup", onmouseup);
            $body.off("touchstart", onmousedown);
            $body.off("touchmove", onmousemove);
            return $body.off("touchend", onmouseup);
          });
        });
      })(this)();
      (function(_this) {
        return (function() {
          var onblimpclick, onblimpdblclick;
          onblimpclick = function(ev) {
            var event;
            event = {
              type: "balloonclick"
            };
            return _this.trigger(event.type, event);
          };
          onblimpdblclick = function(ev) {
            var event;
            event = {
              type: "balloondblclick"
            };
            return _this.trigger(event.type, event);
          };
          _this.$named.on("click", ".blimp", onblimpclick);
          _this.$named.on("dblclick", ".blimp", onblimpdblclick);
          return _this.destructors.push(function() {
            _this.$named.off("click", ".blimp", onblimpclick);
            return _this.$named.off("dblclick", ".blimp", onblimpdblclick);
          });
        });
      })(this)();
      (function(_this) {
        return (function() {
          var onanchorclick, onchoiceclick;
          onchoiceclick = function(ev) {
            var argc, event, i, _i;
            event = {};
            event.type = "choiceselect";
            event.id = ev.target.dataset["id"];
            event.args = [];
            event.text = ev.target.textContent;
            argc = Number(ev.target.dataset["argc"]);
            for (i = _i = 0; 0 <= argc ? _i < argc : _i > argc; i = 0 <= argc ? ++_i : --_i) {
              event.args.push(ev.target.dataset["argv" + i]);
            }
            return _this.trigger(event.type, event);
          };
          onanchorclick = function(ev) {
            var argc, event, i, _i;
            event = {};
            event.type = "anchorselect";
            event.id = ev.target.dataset["id"];
            event.args = [];
            event.text = ev.target.textContent;
            argc = Number(ev.target.dataset["argc"]);
            for (i = _i = 0; 0 <= argc ? _i < argc : _i > argc; i = 0 <= argc ? ++_i : --_i) {
              event.args.push(ev.target.dataset["argv" + i]);
            }
            return _this.trigger(event.type, event);
          };
          _this.$named.on("click", ".ikagaka-choice", onchoiceclick);
          _this.$named.on("click", ".ikagaka-anchor", onanchorclick);
          return _this.destructors.push(function() {
            _this.$named.off("click", ".ikagaka-choice", onchoiceclick);
            return _this.$named.off("click", ".ikagaka-anchor", onanchorclick);
          });
        });
      })(this)();
      return Promise.resolve(this);
    };

    Named.prototype.destructor = function() {
      this.scopes.forEach(function(scope) {
        return $(scope.element).remove();
      });
      this.destructors.forEach(function(destructor) {
        return destructor();
      });
      this.$named.remove();
    };

    Named.prototype.scope = function(scopeId) {
      if (!isFinite(scopeId)) {
        return this.currentScope;
      }
      if (!this.scopes[scopeId]) {
        this.scopes[scopeId] = new Scope(scopeId, this.shell, this.balloon);
      }
      this.currentScope = this.scopes[scopeId];
      this.$named.append(this.scopes[scopeId].element);
      return this.currentScope;
    };

    Named.prototype.openInputBox = function(id, text) {
      var event;
      if (text == null) {
        text = "";
      }
      event = {
        "type": "userinput",
        "id": id,
        "content": prompt("UserInput", text)
      };
      this.trigger(event.type, event);
    };

    Named.prototype.openCommunicateBox = function(text) {
      var event;
      if (text == null) {
        text = "";
      }
      event = {
        "type": "communicateinput",
        "sender": "user",
        "content": prompt("Communicate", text)
      };
      this.trigger(event.type, event);
    };

    Named.prototype.on = function(event, callback) {
      if (!((event != null) && (callback != null))) {
        throw Error('on() event and callback required');
      }
      if (this.listener == null) {
        this.listener = {};
      }
      if (this.listener[event] == null) {
        this.listener[event] = [];
      }
      if (-1 === this.listener[event].indexOf(callback)) {
        this.listener[event].push(callback);
      }
      return this;
    };

    Named.prototype.off = function(event, callback) {
      var index;
      if ((event != null) && (callback != null)) {
        if (this.listener[event] != null) {
          index = this.listener[event].indexOf(callback);
          if (index !== -1) {
            this.listener[event].splice(index, 1);
          }
        }
      } else if (event != null) {
        delete this.listener[event];
      } else if (callback != null) {
        for (event in this.listener) {
          index = this.listener[event].indexOf(callback);
          if (index !== -1) {
            this.listener[event].splice(index, 1);
          }
        }
      } else {
        delete this.listener;
      }
      return this;
    };

    Named.prototype.trigger = function() {
      var args, callback, event, _i, _len, _ref1, _ref2;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (((_ref1 = this.listener) != null ? _ref1[event] : void 0) != null) {
        _ref2 = this.listener[event];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          callback = _ref2[_i];
          setTimeout((function() {
            return callback.apply(this, args);
          }), 0);
        }
      }
      return this;
    };

    return Named;

  })();

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = Named;
  } else if (this.Ikagaka != null) {
    this.Ikagaka.Named = Named;
  } else {
    this.Named = Named;
  }

}).call(this);
