// Generated by CoffeeScript 1.8.0
(function() {
  var $, Named, Scope, prompt, _ref;

  $ = window["Zepto"];

  Scope = window["Scope"] || ((_ref = window["Ikagaka"]) != null ? _ref["Scope"] : void 0) || require("./Scope.js");

  prompt = window["prompt"];

  Named = (function() {
    function Named(shell, balloon) {
      this.shell = shell;
      this.balloon = balloon;
      this.$named = $("<div />").addClass("named");
      this.element = this.$named[0];
      this.scopes = [];
      this.currentScope = null;
      this.destructors = [];
    }

    Named.prototype.load = function(callback) {
      this.scopes[0] = this.scope(0);
      this.currentScope = this.scopes[0];
      (function(_this) {
        return (function() {
          var $body, $target, onmousedown, onmousemove, onmouseup, relLeft, relTop;
          $target = null;
          relLeft = relTop = 0;
          onmouseup = function(ev) {
            var _ref1, _ref2;
            if (!!$target) {
              if ($(ev.target).hasClass("blimpText") || $(ev.target).hasClass("blimpCanvas")) {
                if ($target[0] === ((_ref1 = $(ev.target).parent()) != null ? _ref1[0] : void 0)) {
                  return $target = null;
                }
              } else if ($(ev.target).hasClass("surfaceCanvas")) {
                if ($target[0] === ((_ref2 = $(ev.target).parent().parent()) != null ? _ref2[0] : void 0)) {
                  return $target = null;
                }
              }
            }
          };
          onmousedown = function(ev) {
            var $scope, left, offsetX, offsetY, pageX, pageY, top, _ref1, _ref2, _ref3, _ref4;
            if ($(ev.target).hasClass("blimpText") || $(ev.target).hasClass("blimpCanvas")) {
              if (((_ref1 = $(ev.target).parent().parent().parent()) != null ? _ref1[0] : void 0) === _this.element) {
                $target = $(ev.target).parent();
                $scope = $target.parent();
                _ref2 = $target.offset(), top = _ref2.top, left = _ref2.left;
                offsetY = parseInt($target.css("left"), 10);
                offsetX = parseInt($target.css("top"), 10);
                if (/^touch/.test(ev.type)) {
                  pageX = ev.touches[0].pageX;
                  pageY = ev.touches[0].pageY;
                } else {
                  pageX = ev.pageX;
                  pageY = ev.pageY;
                }
                relLeft = pageX - offsetY;
                relTop = pageY - offsetX;
                return setTimeout((function() {
                  return _this.$named.append($scope);
                }), 100);
              }
            } else if ($(ev.target).hasClass("surfaceCanvas")) {
              if (((_ref3 = $(ev.target).parent().parent().parent()) != null ? _ref3[0] : void 0) === _this.element) {
                $scope = $target = $(ev.target).parent().parent();
                _ref4 = $target.offset(), top = _ref4.top, left = _ref4.left;
                if (/^touch/.test(ev.type)) {
                  pageX = ev.touches[0].pageX;
                  pageY = ev.touches[0].pageY;
                } else {
                  pageX = ev.pageX;
                  pageY = ev.pageY;
                }
                relLeft = pageX - left;
                relTop = pageY - top;
                return setTimeout((function() {
                  return _this.$named.append($scope);
                }), 100);
              }
            }
          };
          onmousemove = function(ev) {
            var pageX, pageY;
            if (!!$target) {
              if (/^touch/.test(ev.type)) {
                pageX = ev.touches[0].pageX;
                pageY = ev.touches[0].pageY;
              } else {
                pageX = ev.pageX;
                pageY = ev.pageY;
              }
              return $target.css({
                left: pageX - relLeft,
                top: pageY - relTop
              });
            }
          };
          $body = $("body");
          $body.on("mousedown", onmousedown);
          $body.on("mousemove", onmousemove);
          $body.on("mouseup", onmouseup);
          $body.on("touchstart", onmousedown);
          $body.on("touchmove", onmousemove);
          $body.on("touchend", onmouseup);
          return _this.destructors.push(function() {
            $body.off("mousedown", onmousedown);
            $body.off("mousemove", onmousemove);
            $body.off("mouseup", onmouseup);
            $body.off("touchstart", onmousedown);
            $body.off("touchmove", onmousemove);
            return $body.off("touchend", onmouseup);
          });
        });
      })(this)();
      (function(_this) {
        return (function() {
          var onblimpclick, onblimpdblclick;
          onblimpclick = function(ev) {
            var detail;
            detail = {
              "ID": "OnBalloonClick"
            };
            return _this.$named.trigger($.Event("IkagakaSurfaceEvent", {
              detail: detail
            }));
          };
          onblimpdblclick = function(ev) {
            var detail;
            detail = {
              "ID": "OnBalloonDoubleClick"
            };
            return _this.$named.trigger($.Event("IkagakaSurfaceEvent", {
              detail: detail
            }));
          };
          _this.$named.on("click", ".blimp", onblimpclick);
          _this.$named.on("dblclick", ".blimp", onblimpdblclick);
          return _this.destructors.push(function() {
            this.$named.off("click", ".blimp", onblimpclick);
            return this.$named.off("dblclick", ".blimp", onblimpdblclick);
          });
        });
      })(this)();
      (function(_this) {
        return (function() {
          var onanchorclick, onchoiceclick;
          onchoiceclick = function(ev) {
            var argc, detail, i, id, _i, _j;
            id = ev.target.dataset["id"];
            argc = Number(ev.target.dataset["argc"]);
            if (/^On/.test(id)) {
              detail = {};
              detail.ID = id;
              for (i = _i = 0; 0 <= argc ? _i < argc : _i > argc; i = 0 <= argc ? ++_i : --_i) {
                detail["Reference" + i] = ev.target.dataset["argv" + i];
              }
              return _this.$named.trigger($.Event("IkagakaSurfaceEvent", {
                detail: detail
              }));
            } else if (argc) {
              detail = {};
              detail.ID = "OnChoiceSelectEx";
              detail.Reference0 = ev.target.textContent;
              detail.Reference1 = id;
              for (i = _j = 0; 0 <= argc ? _j < argc : _j > argc; i = 0 <= argc ? ++_j : --_j) {
                detail["Reference" + i + 2] = ev.target.dataset["argv" + i];
              }
              return _this.$named.trigger($.Event("IkagakaSurfaceEvent", {
                detail: detail
              }));
            } else {
              detail = {};
              detail.ID = "OnChoiceSelect";
              detail.Reference0 = id;
              return _this.$named.trigger($.Event("IkagakaSurfaceEvent", {
                detail: detail
              }));
            }
          };
          onanchorclick = function(ev) {
            var argc, detail, i, id, _i, _j;
            id = ev.target.dataset["id"];
            argc = Number(ev.target.dataset["argc"]);
            if (/^On/.test(id)) {
              detail = {};
              detail.ID = id;
              for (i = _i = 0; 0 <= argc ? _i < argc : _i > argc; i = 0 <= argc ? ++_i : --_i) {
                detail["Reference" + i] = ev.target.dataset["argv" + i];
              }
              return _this.$named.trigger($.Event("IkagakaSurfaceEvent", {
                detail: detail
              }));
            } else if (argc) {
              detail = {};
              detail.ID = "OnAnchorSelectEx";
              detail.Reference0 = ev.target.textContent;
              detail.Reference1 = id;
              for (i = _j = 0; 0 <= argc ? _j < argc : _j > argc; i = 0 <= argc ? ++_j : --_j) {
                detail["Reference" + i + 2] = ev.target.dataset["argv" + i];
              }
              return _this.$named.trigger($.Event("IkagakaSurfaceEvent", {
                detail: detail
              }));
            } else {
              detail = {};
              detail.ID = "OnAnchorSelect";
              detail.Reference0 = id;
              return _this.$named.trigger($.Event("IkagakaSurfaceEvent", {
                detail: detail
              }));
            }
          };
          _this.$named.on("click", ".ikagaka-choice", onchoiceclick);
          _this.$named.on("click", ".ikagaka-anchor", onanchorclick);
          return _this.destructors.push(function() {
            _this.$named.off("click", ".ikagaka-choice", onchoiceclick);
            return _this.$named.off("click", ".ikagaka-anchor", onanchorclick);
          });
        });
      })(this)();
      setTimeout(callback);
    };

    Named.prototype.destructor = function() {
      this.scopes.forEach(function(scope) {
        return $(scope.element).remove();
      });
      this.destructors.forEach(function(destructor) {
        return destructor();
      });
      this.$named.remove();
    };

    Named.prototype.scope = function(scopeId) {
      if (!isFinite(scopeId)) {
        return this.currentScope;
      }
      if (!this.scopes[scopeId]) {
        this.scopes[scopeId] = new Scope(scopeId, this.shell, this.balloon);
      }
      this.currentScope = this.scopes[scopeId];
      this.$named.append(this.scopes[scopeId].element);
      return this.currentScope;
    };

    Named.prototype.openInputBox = function(id, text) {
      var detail;
      if (text == null) {
        text = "";
      }
      detail = {
        "ID": "OnUserInput",
        "Reference0": id,
        "Reference1": prompt("UserInput", text) || ""
      };
      this.$named.trigger($.Event("IkagakaSurfaceEvent", {
        detail: detail
      }));
    };

    Named.prototype.openCommunicateBox = function(text) {
      var detail;
      if (text == null) {
        text = "";
      }
      detail = {
        "ID": "OnCommunicate",
        "Reference0": "user",
        "Reference1": prompt("Communicate", text) || ""
      };
      this.$named.trigger($.Event("IkagakaSurfaceEvent", {
        detail: detail
      }));
    };

    return Named;

  })();

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = Named;
  } else if (this.Ikagaka != null) {
    this.Ikagaka.Named = Named;
  } else {
    this.Named = Named;
  }

}).call(this);
