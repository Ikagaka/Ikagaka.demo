// Generated by CoffeeScript 1.8.0
(function() {
  var SurfaceUtil;

  SurfaceUtil = (function() {
    function SurfaceUtil(cnv) {
      this.cnv = cnv;
      this.ctx = this.cnv.getContext("2d");
    }

    SurfaceUtil.prototype.composeElements = function(elements) {
      var canvas, copyed, offsetX, offsetY, type, x, y, _ref;
      if (elements.length === 0) {
        return;
      }
      _ref = elements[0], canvas = _ref.canvas, type = _ref.type, x = _ref.x, y = _ref.y;
      offsetX = offsetY = 0;
      switch (type) {
        case "base":
          this.base(canvas, offsetX, offsetY);
          break;
        case "overlay":
          this.overlayfast(canvas, offsetX + x, offsetY + y);
          break;
        case "overlayfast":
          this.overlayfast(canvas, offsetX + x, offsetY + y);
          break;
        case "replace":
          this.replace(canvas, offsetX + x, offsetY + y);
          break;
        case "add":
          this.overlayfast(canvas, offsetX + x, offsetY + y);
          break;
        case "bind":
          this.overlayfast(canvas, offsetX + x, offsetY + y);
          break;
        case "interpolate":
          this.interpolate(canvas, offsetX + x, offsetY + y);
          break;
        case "move":
          offsetX = x;
          offsetY = y;
          copyed = SurfaceUtil.copy(this.cnv);
          this.base(copyed, offsetX, offsetY);
          break;
        default:
          console.error(elements[0]);
      }
      this.composeElements(elements.slice(1));
    };

    SurfaceUtil.prototype.base = function(part, x, y) {
      SurfaceUtil.clear(this.cnv);
      this.init(part, x, y);
    };

    SurfaceUtil.prototype.overlayfast = function(part, x, y) {
      this.ctx.globalCompositeOperation = "source-over";
      this.ctx.drawImage(part, x, y);
    };

    SurfaceUtil.prototype.interpolate = function(part, x, y) {
      this.ctx.globalCompositeOperation = "destination-over";
      this.ctx.drawImage(part, x, y);
    };

    SurfaceUtil.prototype.replace = function(part, x, y) {
      this.ctx.clearRect(x, y, part.width, part.height);
      this.overlayfast(part, x, y);
    };

    SurfaceUtil.prototype.init = function(cnv, x, y) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      this.cnv.width = cnv.width;
      this.cnv.height = cnv.height;
      this.overlayfast(cnv, x, y);
    };

    SurfaceUtil.pna = function(cnvA, cnvB) {
      var ctxA, ctxB, dataA, dataB, i, imgdataA, imgdataB;
      ctxA = cnvA.getContext("2d");
      ctxB = cnvB.getContext("2d");
      imgdataA = ctxA.getImageData(0, 0, cnvA.width, cnvA.height);
      imgdataB = ctxB.getImageData(0, 0, cnvB.width, cnvB.height);
      dataA = imgdataA.data;
      dataB = imgdataB.data;
      i = 0;
      while (i < dataA.length) {
        dataA[i + 3] = dataB[i];
        i += 4;
      }
      ctxA.putImageData(imgdataA, 0, 0);
      return cnvA;
    };

    SurfaceUtil.choice = function(ary) {
      return ary[Math.round(Math.random() * (ary.length - 1))];
    };

    SurfaceUtil.clear = function(cnv) {
      cnv.width = cnv.width;
    };

    SurfaceUtil.copy = function(cnv) {
      var copy, ctx;
      copy = document.createElement("canvas");
      ctx = copy.getContext("2d");
      copy.width = cnv.width;
      copy.height = cnv.height;
      ctx.drawImage(cnv, 0, 0);
      return copy;
    };

    SurfaceUtil.transImage = function(img) {
      var a, b, cnv, ctx, data, g, i, imgdata, r;
      cnv = SurfaceUtil.copy(img);
      ctx = cnv.getContext("2d");
      imgdata = ctx.getImageData(0, 0, img.width, img.height);
      data = imgdata.data;
      r = data[0], g = data[1], b = data[2], a = data[3];
      i = 0;
      if (a !== 0) {
        while (i < data.length) {
          if (r === data[i] && g === data[i + 1] && b === data[i + 2]) {
            data[i + 3] = 0;
          }
          i += 4;
        }
      }
      ctx.putImageData(imgdata, 0, 0);
      return cnv;
    };

    SurfaceUtil.loadImage = function(url, callback) {
      var img;
      img = new Image;
      img.src = url;
      img.addEventListener("load", function() {
        return callback(null, img);
      });
      img.addEventListener("error", function(ev) {
        console.error(ev);
        return callback(ev.error, null);
      });
    };

    return SurfaceUtil;

  })();

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = SurfaceUtil;
  } else if (this.Ikagaka != null) {
    this.Ikagaka.SurfaceUtil = SurfaceUtil;
  } else {
    this.SurfaceUtil = SurfaceUtil;
  }

}).call(this);
