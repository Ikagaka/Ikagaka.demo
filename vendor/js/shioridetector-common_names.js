// Generated by CoffeeScript 1.8.0
(function() {
  var detector, resolve_pseudo_shiori, shiori_by_dll_name, stat_detect, _ref;

  shiori_by_dll_name = {
    'satori.dll': 'satori',
    'yaya.dll': 'yaya',
    'aya5.dll': 'aya5',
    'aya.dll': 'aya',
    'misaka.dll': 'misaka',
    'akari.dll': 'akari',
    'main.azr': 'akari',
    'ese-shiori.dll': 'ese_shiori',
    'eseai.ini': 'ese_shiori',
    'pixy.dll': 'pixy',
    'psyche.dll': 'psyche_system',
    'init.vsc': 'scheme_shiori',
    'hitomi.dll': 'hitomi',
    'yuhna.dll': 'yuhna',
    'mae_corpus.txt': 'mae',
    'touri.dll': 'touri',
    'shino.dll': 'shino',
    'nasino.dll': 'nasino',
    'nasino.ini': 'nasino',
    'rishu_proxy.dll': 'rishu',
    'rishu_remote.pl': 'rishu',
    'hisui.dll': 'hisui',
    'hisuiconf.xml': 'hisui'
  };

  stat_detect = function(fs, file_path, shiori_name) {
    return new Promise(function(resolve, reject) {
      return fs.stat(file_path, function(err, stat) {
        if (err != null) {
          return reject();
        } else {
          return resolve(shiori_name);
        }
      });
    });
  };

  resolve_pseudo_shiori = function(resolve, reject, fs, shiori, shiori_name) {
    var error;
    if (shiori != null) {
      try {
        return resolve(new shiori(fs));
      } catch (_error) {
        error = _error;
        return reject(error);
      }
    } else {
      return reject(new Error("SHIORI subsystem '" + shiori_name + "' is detected but pseudo SHIORI subsystem for that is not supported."));
    }
  };

  detector = function(fs, dirpath, shiories) {
    return new Promise(function(resolve, reject) {
      return fs.readFile(dirpath + 'descript.txt', {
        encoding: 'utf8'
      }, function(err, data) {
        var detect_promise, file_path, result, shiori, shiori_name, shiori_path;
        if ((err == null) && (result = /^\s*shiori\s*,\s*(.*)\s*$/i.exec(data))) {
          shiori_path = result[1];
        } else {
          shiori_path = 'shiori.dll';
        }
        shiori_name = shiori_by_dll_name[shiori_path];
        if (shiori_name != null) {
          shiori = shiories[shiori_name];
          return resolve_pseudo_shiori(resolve, reject, fs, shiori, shiori_name);
        } else {
          detect_promise = stat_detect(fs, dirpath + 'kawarirc.kis', 'kawari')["catch"](function() {
            return stat_detect(fs, dirpath + 'kawari.ini', 'kawari7');
          });
          for (file_path in shiori_by_dll_name) {
            shiori_name = shiori_by_dll_name[file_path];
            detect_promise = (function(file_path, shiori_name) {
              return detect_promise["catch"](function() {
                return stat_detect(fs, dirpath + file_path, shiori_name);
              });
            })(file_path, shiori_name);
          }
          return detect_promise.then(function(shiori_name) {
            shiori = shiories[shiori_name];
            return resolve_pseudo_shiori(resolve, reject, fs, shiori, shiori_name);
          }, function(error) {
            return resolve(null);
          });
        }
      });
    });
  };

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = detector;
  } else {
    if (((_ref = this.ShioriLoader) != null ? _ref.shiori_detectors : void 0) != null) {
      ShioriLoader.shiori_detectors.push(detector);
    } else {
      throw "load ShioriLoader first";
    }
  }

}).call(this);
