// Generated by CoffeeScript 1.8.0
(function() {
  var SakuraScriptPlayer,
    __slice = [].slice;

  SakuraScriptPlayer = (function() {
    function SakuraScriptPlayer(named) {
      this.named = named;
      this.playing = false;
      this.breakTid = 0;
      this.timeCritical = false;
      this.wait_default = 80;
    }

    SakuraScriptPlayer.prototype.play = function(script, listener) {
      var recur, splitargs, tags;
      if (listener == null) {
        listener = {};
      }
      if (this.playing && this.timeCritical) {
        this.trigger_all('reject', listener);
        return;
      }
      this["break"]();
      this.playing = true;
      this.timeCritical = false;
      this.quick = false;
      splitargs = function(str) {
        return str.replace(/"((?:\\\\|\\"|[^"])*)"/g, function(all, quoted) {
          return quoted.replace(/,/g, '\0');
        }).split(/\s*\,\s*/).map(function(arg) {
          return arg.replace(/\0/g, ',');
        });
      };
      tags = [
        {
          re: /^\\[h0]/,
          match: function(group) {
            return this.named.scope(0).blimp(0);
          }
        }, {
          re: /^\\[u1]/,
          match: function(group) {
            return this.named.scope(1).blimp(0);
          }
        }, {
          re: /^\\p\[(\d+)\]/,
          match: function(group) {
            return this.named.scope(Number(group[1]));
          }
        }, {
          re: /^\\p(\d)/,
          match: function(group) {
            return this.named.scope(Number(group[1]));
          }
        }, {
          re: /^\\s(\d)/,
          match: function(group) {
            return this.named.scope().surface(Number(group[1]));
          }
        }, {
          re: /^\\s\[([^\]]+)\]/,
          match: function(group) {
            return this.named.scope().surface(Number(group[1]));
          }
        }, {
          re: /^\\b(\d)/,
          match: function(group) {
            return this.named.scope().blimp(Number(group[1]));
          }
        }, {
          re: /^\\b\[([^\]]+)\]/,
          match: function(group) {
            return this.named.scope().blimp(Number(group[1]));
          }
        }, {
          re: /^\\i(\d)/,
          match: function(group) {
            return this.named.scope().surface().play(Number(group[1]));
          }
        }, {
          re: /^\\i\[(\d+)\]/,
          match: function(group) {
            return this.named.scope().surface().play(Number(group[1]));
          }
        }, {
          re: /^\\w(\d+)/,
          match: function(group) {
            return this.wait = Number(group[1]) * 100;
          }
        }, {
          re: /^\\\_w\[(\d+)\]/,
          match: function(group) {
            return this.wait = Number(group[1]);
          }
        }, {
          re: /^\\\_q/,
          match: function(group) {
            return this.quick = !this.quick;
          }
        }, {
          re: /^\\t/,
          match: function(group) {
            return this.timeCritical = true;
          }
        }, {
          re: /^\\q\[([^\]]+)\]/,
          match: function(group) {
            var blimp;
            blimp = this.named.scope().blimp();
            return blimp.choice.apply(blimp, splitargs(group[1]));
          }
        }, {
          re: /^\\__q\[([^\]]+)\]/,
          match: function(group) {
            var blimp;
            blimp = this.named.scope().blimp();
            return blimp.choiceBegin.apply(blimp, splitargs(group[1]));
          }
        }, {
          re: /^\\__q/,
          match: function(group) {
            return this.named.scope().blimp().choiceEnd();
          }
        }, {
          re: /^\\q\d+\[([^\]]+)\]\[([^\]]+)\]/,
          match: function(group) {
            this.named.scope().blimp().choice(group[2], group[1]);
            return this.named.scope().blimp().br();
          }
        }, {
          re: /^\\_a\[([^\]]+)\]/,
          match: function(group) {
            var blimp;
            blimp = this.named.scope().blimp();
            return blimp.anchorBegin.apply(blimp, splitargs(group[1]));
          }
        }, {
          re: /^\\_a/,
          match: function(group) {
            return this.named.scope().blimp().anchorEnd();
          }
        }, {
          re: /^\\n\[half\]/,
          match: function(group) {
            return this.named.scope().blimp().br();
          }
        }, {
          re: /^\\n/,
          match: function(group) {
            return this.named.scope().blimp().br();
          }
        }, {
          re: /^\\c/,
          match: function(group) {
            return this.named.scope().blimp().clear();
          }
        }, {
          re: /^\\[ez]/,
          match: function(group) {
            this.playing = false;
            return this.named.scopes.forEach(function(scope) {
              return scope.surface().yenE();
            });
          }
        }, {
          re: /^\\-/,
          match: function(group) {
            this.playing = false;
            this.named.scopes.forEach(function(scope) {
              return scope.surface().yenE();
            });
            return this.trigger_all('script:halt', listener);
          }
        }, {
          re: /^\\\\/,
          match: function(group) {
            return this.named.scope().blimp().talk("\\");
          }
        }, {
          re: /^\\\!\[\s*open\s*\,\s*communicatebox\s*\]/,
          match: function(group) {
            return setTimeout(((function(_this) {
              return function() {
                return _this.named.openCommunicateBox();
              };
            })(this)), 2000);
          }
        }, {
          re: /^\\\!\[\s*open\s*\,\s*inputbox\s*\,((?:\\\\|\\\]|[^\]])+)\]/,
          match: function(group) {
            return setTimeout(((function(_this) {
              return function() {
                return _this.named.openInputBox(splitargs(group[1])[0]);
              };
            })(this)), 2000);
          }
        }, {
          re: /^\\\!\[\s*raise\s*\,\s*((?:\\\\|\\\]|[^\]])+)\]/,
          match: function(group) {
            return setTimeout(((function(_this) {
              return function() {
                return _this.trigger_all('script:raise', listener, splitargs(group[1]));
              };
            })(this)), 0);
          }
        }, {
          re: /^\\_u\[0x(\d+)\]/,
          match: function(group) {
            this.wait = this.wait_default;
            return this.named.scope().blimp().talk('&#x' + group[1] + ';');
          }
        }, {
          re: /^\\_m\[0x(\d+)\]/,
          match: function(group) {
            this.wait = this.wait_default;
            return this.named.scope().blimp().talk('&#x' + group[1] + ';');
          }
        }, {
          re: /^\\&\[([^\]]+)\]/,
          match: function(group) {
            this.wait = this.wait_default;
            return this.named.scope().blimp().talk('&' + group[1] + ';');
          }
        }, {
          re: /^\\[45Cx67+v8]/,
          match: function(group) {
            return this.named.scope().blimp().talk(group[0]);
          }
        }, {
          re: /^\\_[ns+V]/,
          match: function(group) {
            return this.named.scope().blimp().talk(group[0]);
          }
        }, {
          re: /^\\__[qt]/,
          match: function(group) {
            return this.named.scope().blimp().talk(group[0]);
          }
        }, {
          re: /^\\[f8j]\[.*?\]/,
          match: function(group) {
            return this.named.scope().blimp().talk(group[0]);
          }
        }, {
          re: /^\\_[bl!?s]\[.*?\]/,
          match: function(group) {
            return this.named.scope().blimp().talk(group[0]);
          }
        }, {
          re: /^\\__[wq]\[.*?\]/,
          match: function(group) {
            return this.named.scope().blimp().talk(group[0]);
          }
        }, {
          re: /^\\!\[.*?\]/,
          match: function(group) {
            return this.named.scope().blimp().talk(group[0]);
          }
        }, {
          re: /^\\!_[v]\[.*?\]/,
          match: function(group) {
            return this.named.scope().blimp().talk(group[0]);
          }
        }, {
          re: /^./,
          match: function(group) {
            this.wait = this.wait_default;
            return this.named.scope().blimp().talk(group[0]);
          }
        }
      ];
      (recur = (function(_this) {
        return function() {
          var tag;
          if (script.length === 0) {
            _this.playing = false;
          }
          if (!_this.playing) {
            _this.trigger_all('finish', listener);
            _this.breakTid = setTimeout(function() {
              _this.trigger_all('close', listener);
              return _this["break"]();
            }, 10000);
            return;
          }
          _this.wait = 0;
          tag = tags.find(function(tag) {
            return tag.re.test(script);
          });
          if (tag != null) {
            script = script.replace(tag.re, function() {
              var all, group, offset, _i;
              group = 3 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 2) : (_i = 0, []), offset = arguments[_i++], all = arguments[_i++];
              tag.match.call(_this, group);
              return '';
            });
          }
          return _this.breakTid = setTimeout(recur, _this.quick ? 0 : _this.wait);
        };
      })(this))();
    };

    SakuraScriptPlayer.prototype["break"] = function() {
      this.playing = false;
      this.timeCritical = false;
      clearTimeout(this.breakTid);
      this.named.scopes.forEach(function(scope) {
        return scope.blimp(-1).clear();
      });
    };

    SakuraScriptPlayer.prototype.on = function(event, callback) {
      if (!((event != null) && (callback != null))) {
        throw Error('on() event and callback required');
      }
      if (this.listener == null) {
        this.listener = {};
      }
      if (this.listener[event] == null) {
        this.listener[event] = [];
      }
      if (-1 === this.listener[event].indexOf(callback)) {
        this.listener[event].push(callback);
      }
      return this;
    };

    SakuraScriptPlayer.prototype.off = function(event, callback) {
      var index;
      if ((event != null) && (callback != null)) {
        if (this.listener[event] != null) {
          index = this.listener[event].indexOf(callback);
          if (index !== -1) {
            this.listener[event].splice(index, 1);
          }
        }
      } else if (event != null) {
        delete this.listener[event];
      } else if (callback != null) {
        for (event in this.listener) {
          index = this.listener[event].indexOf(callback);
          if (index !== -1) {
            this.listener[event].splice(index, 1);
          }
        }
      } else {
        delete this.listener;
      }
      return this;
    };

    SakuraScriptPlayer.prototype.trigger = function() {
      var args, callback, event, _i, _len, _ref, _ref1;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (((_ref = this.listener) != null ? _ref[event] : void 0) != null) {
        _ref1 = this.listener[event];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          callback = _ref1[_i];
          setTimeout((function() {
            return callback.apply(this, args);
          }), 0);
        }
      }
      return this;
    };

    SakuraScriptPlayer.prototype.trigger_local = function() {
      var args, event, listener;
      event = arguments[0], listener = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if ((listener != null ? listener[event] : void 0) != null) {
        setTimeout((function() {
          return listener[event].apply(this, args);
        }), 0);
      }
      return this;
    };

    SakuraScriptPlayer.prototype.trigger_all = function() {
      var args, event, listener;
      event = arguments[0], listener = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      this.trigger_local.apply(this, [event, listener].concat(args));
      this.trigger.apply(this, [event].concat(args));
      return this;
    };

    return SakuraScriptPlayer;

  })();

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = SakuraScriptPlayer;
  } else if (this.Ikagaka != null) {
    this.Ikagaka.SakuraScriptPlayer = SakuraScriptPlayer;
  } else {
    this.SakuraScriptPlayer = SakuraScriptPlayer;
  }

}).call(this);
