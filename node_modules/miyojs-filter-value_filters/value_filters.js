// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */
var MiyoFilters;

if (typeof MiyoFilters === "undefined" || MiyoFilters === null) {
  MiyoFilters = {};
}

MiyoFilters.set_value_filters = {
  type: 'through',
  filter: function(argument, request, id) {
    this.value_filters = argument.set_value_filters;
    return argument;
  }
};

MiyoFilters.append_value_filters = {
  type: 'through',
  filter: function(argument, request, id) {
    var name, _i, _len, _ref;
    _ref = argument.append_value_filters;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      this.value_filters.push(name);
    }
    return argument;
  }
};

MiyoFilters.prepend_value_filters = {
  type: 'through',
  filter: function(argument, request, id) {
    var name, _i, _len, _ref;
    _ref = argument.prepend_value_filters;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      this.value_filters.unshift(name);
    }
    return argument;
  }
};

MiyoFilters.remove_value_filters = {
  type: 'through',
  filter: function(argument, request, id) {
    var index, name, _i, _len, _ref;
    _ref = argument.remove_value_filters;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      index = this.value_filters.indexOf(name);
      if (index !== -1) {
        this.value_filters.splice(index, 1);
      }
    }
    return argument;
  }
};

if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
  module.exports = MiyoFilters;
}

//# sourceMappingURL=value_filters.js.map
