{
  "name": "partperiod",
  "version": "0.0.1",
  "description": "PartPeriod - period with placeholder",
  "main": "partperiod.js",
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "parttime": ">= 0.0.6"
  },
  "author": {
    "name": "narazaka",
    "url": "http://narazaka.net/"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/Narazaka/partperiod.git"
  },
  "readme": "PartPeriod - period with placeholder\r\n================================\r\n\r\nSYNOPSYS\r\n--------------------------------\r\n\r\n    var PartPeriod = require('partperiod');\r\n    var pp = new PartPeriod('*-01-01/*-01-03');\r\n    var now = new Date();\r\n    if(pp.includes(now)) console.log('Sanganichi');\r\n\r\nDESCRIPTION\r\n--------------------------------\r\n\r\nPeriod of moments with placeholders. That is useful for compareing repeating period.\r\n\r\nCurrently, PartPeriod does not support timezones.\r\n\r\nINSTALL & USAGE\r\n--------------------------------\r\n\r\n### node.js\r\n\r\n    npm install -g partperiod\r\n\r\nand\r\n\r\n    var PartPeriod = require('partperiod');\r\n\r\n### browsers\r\n\r\nGet partperiod.js by downloading dist zip or some and\r\n\r\n    <script src=\"partperiod.js\"></script>\r\n\r\nSUMMARY\r\n--------------------------------\r\n\r\n### class PartPeriod\r\n\r\n#### constructor(periodString)\r\n\r\n##### example Construct\r\n\r\n    new PartPeriod()\r\n    new PartPeriod('*-10-12/*-*-*')\r\n    new PartPeriod('1970-1-1/1990-1-1')\r\n\n##### param\r\n\r\n- **periodString** [String] String value representing a partperiod. The string should be in a format recognized by the PartPeriod.parse() method (\"begin/end\").\r\n\r\n#### properties\r\n\r\n- begin [PartTime]\r\n- end [PartTime]\r\n\r\n#### parse(periodString) {static method}\r\n\r\nget partperiod data from partperiod string\r\n\r\n##### param\r\n\r\n- **periodString** [String] String value representing a partperiod. The string should be in a format \"begin/end\" (begin and end should be in a format recognized by the PartTime.parse() method (yyyy-mm-ddT00:00:00.000)).\r\n\r\n##### return\r\n\r\n[Hash] Hash data representing partperiod.\r\n\r\n#### includes(date)\r\n\r\nis date in the period?\r\n\r\n##### param\r\n\r\n- **date** [DateLike] Date or DateLike (has getFullYear, getMonth, ... getMilliseconds)\r\n\r\n##### return\r\n\r\n[Boolean] returns true if date is in the period else false\r\n\r\n#### toString()\r\n\r\n##### return\r\n\r\n[String] yyyy-mm-ddT00:00:00.000/yyyy-mm-ddT00:00:00.000.\r\n\r\nMORE DOCUMENTATION\r\n--------------------------------\r\n\r\nSee doc/ or parttime.coffee comments.\r\n\r\nLICENSE\r\n--------------------------------\r\n\r\n(C) 2014 Narazaka : Licensed under [The MIT License](http://narazaka.net/license/MIT?2014)\r\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/Narazaka/partperiod/issues"
  },
  "homepage": "https://github.com/Narazaka/partperiod",
  "_id": "partperiod@0.0.1",
  "_from": "partperiod@*"
}
