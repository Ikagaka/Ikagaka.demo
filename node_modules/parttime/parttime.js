// Generated by CoffeeScript 1.7.1

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */
var PartTime;

PartTime = (function() {
  function PartTime(timeString) {
    var name, time, value;
    if (timeString != null) {
      time = PartTime.parse(timeString);
      for (name in time) {
        value = time[name];
        this[name] = value;
      }
    }
  }

  PartTime.prototype.year = null;

  PartTime.prototype.month = null;

  PartTime.prototype.date = null;

  PartTime.prototype.hour = null;

  PartTime.prototype.minute = null;

  PartTime.prototype.second = null;

  PartTime.prototype.millisecond = null;

  PartTime._levels = ['millisecond', 'second', 'minute', 'hour', 'date', 'month', 'year'];

  PartTime.parse = function(timeString) {
    var date, index, name, part_state, parttime, result, time, _i, _len, _ref;
    date = null;
    time = null;
    result = null;
    if (result = timeString.match(/^([\d\-*]+)T([\d:*.]+)$/)) {
      date = result[1];
      time = result[2];
    } else if (result = timeString.match(/^([\d\-*]+)$/)) {
      date = result[1];
    } else if (result = timeString.match(/^T?([\d:*.]+)$/)) {
      time = result[1];
    } else {
      throw 'Invalid Time';
    }
    parttime = {};
    if (date != null) {
      result = null;
      if (result = date.match(/^(?:([\d]+|\*)-)?([\d]+|\*)-([\d]+|\*)$/)) {
        if ((result[1] != null) && result[1] !== '*') {
          parttime.year = Math.floor(result[1]);
        }
        if (result[2] !== '*') {
          parttime.month = Math.floor(result[2]);
        }
        if (result[3] !== '*') {
          parttime.date = Math.floor(result[3]);
        }
      } else {
        throw 'Invalid Time';
      }
    }
    if (time != null) {
      result = null;
      if (result = time.match(/^([\d]+|\*):([\d]+|\*)(?::([\d]+|\*)(?:\.([\d]+|\*))?)?$/)) {
        if (result[1] !== '*') {
          parttime.hour = Math.floor(result[1]);
        }
        if (result[2] !== '*') {
          parttime.minute = Math.floor(result[2]);
        }
        if ((result[3] != null) && result[3] !== '*') {
          parttime.second = Math.floor(result[3]);
        }
        if ((result[4] != null) && result[4] !== '*') {
          parttime.millisecond = Math.floor(result[4]);
        }
      } else {
        throw 'Invalid Time';
      }
    }
    part_state = 0;
    _ref = this._levels;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      name = _ref[index];
      if ((part_state % 2) === 0) {
        if (parttime[name] != null) {
          part_state++;
        }
      } else {
        if (parttime[name] == null) {
          part_state++;
        }
      }
    }
    if (part_state > 2) {
      throw 'Invalid PartTime : two part (such as 2014-*-12) is not allowed.';
    }
    return parttime;
  };

  PartTime.prototype.getFullYear = function() {
    return this.year;
  };

  PartTime.prototype.getMonth = function() {
    if (this.month != null) {
      return this.month - 1;
    }
  };

  PartTime.prototype.getDate = function() {
    return this.date;
  };

  PartTime.prototype.getHours = function() {
    return this.hour;
  };

  PartTime.prototype.getMinutes = function() {
    return this.minute;
  };

  PartTime.prototype.getSeconds = function() {
    return this.second;
  };

  PartTime.prototype.getMilliseconds = function() {
    return this.millisecond;
  };

  PartTime.prototype.compare = function(date_c) {
    var date, date_cmp, diff, hour, hour_cmp, millisecond, millisecond_cmp, minute, minute_cmp, month, month_cmp, second, second_cmp, year, year_cmp;
    year = this.getFullYear();
    year_cmp = date_c.getFullYear();
    if ((year != null) && (year_cmp != null)) {
      diff = year - year_cmp;
      if (diff) {
        return diff;
      }
    }
    month = this.getMonth();
    month_cmp = date_c.getMonth();
    if ((month != null) && (month_cmp != null)) {
      diff = month - month_cmp;
      if (diff) {
        return diff;
      }
    }
    date = this.getDate();
    date_cmp = date_c.getDate();
    if ((date != null) && (date_cmp != null)) {
      diff = date - date_cmp;
      if (diff) {
        return diff;
      }
    }
    hour = this.getHours();
    hour_cmp = date_c.getHours();
    if ((hour != null) && (hour_cmp != null)) {
      diff = hour - hour_cmp;
      if (diff) {
        return diff;
      }
    }
    minute = this.getMinutes();
    minute_cmp = date_c.getMinutes();
    if ((minute != null) && (minute_cmp != null)) {
      diff = minute - minute_cmp;
      if (diff) {
        return diff;
      }
    }
    second = this.getSeconds();
    second_cmp = date_c.getSeconds();
    if ((second != null) && (second_cmp != null)) {
      diff = second - second_cmp;
      if (diff) {
        return diff;
      }
    }
    millisecond = this.getMilliseconds();
    millisecond_cmp = date_c.getMilliseconds();
    if ((millisecond != null) && (millisecond_cmp != null)) {
      diff = millisecond - millisecond_cmp;
      if (diff) {
        return diff;
      }
    }
    return 0;
  };

  PartTime.prototype.elementToString = function(element, padding) {
    if (padding == null) {
      padding = 0;
    }
    if (element != null) {
      return (Array(padding + 1).join('0') + element).slice(-padding);
    } else {
      return '*';
    }
  };

  PartTime.prototype.toString = function() {
    return "" + (this.elementToString(this.year)) + "-" + (this.elementToString(this.month, 2)) + "-" + (this.elementToString(this.date, 2)) + "T" + (this.elementToString(this.hour, 2)) + ":" + (this.elementToString(this.minute, 2)) + ":" + (this.elementToString(this.second, 2)) + "." + (this.elementToString(this.millisecond, 3));
  };

  return PartTime;

})();

if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
  module.exports = PartTime;
}

//# sourceMappingURL=parttime.map
