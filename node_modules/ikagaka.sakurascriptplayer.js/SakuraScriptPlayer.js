// Generated by CoffeeScript 1.7.1
var SakuraScriptPlayer;

SakuraScriptPlayer = (function() {
  function SakuraScriptPlayer(named) {
    this.named = named;
    this.playing = false;
    this.breakTid = 0;
    this.timeCritical = false;
  }

  SakuraScriptPlayer.prototype.play = function(script, callback) {
    var quick, recur, reg, wait;
    if (callback == null) {
      callback = function() {};
    }
    if (this.playing && this.timeCritical) {
      setTimeout(function() {
        return callback(true);
      });
      return;
    }
    this["break"]();
    this.playing = true;
    this.timeCritical = false;
    quick = false;
    wait = 80;
    reg = {
      "Y0": /^\\0/,
      "Y1": /^\\1/,
      "Yh": /^\\h/,
      "Yu": /^\\u/,
      "Yp": /^\\p\[(\d+)\]/,
      "Ypn": /^\\p(\d)/,
      "Ysn": /^\\s(\d)/,
      "Ys": /^\\s\[([^\]]+)\]/,
      "Yb": /^\\b\[([^\]]+)\]/,
      "Yi": /^\\i\[(\d+)\]/,
      "YwN": /^\\w(\d+)/,
      "Y_w": /^\\\_w\[(\d+)\]/,
      "Y_q": /^\\\_q/,
      "Yt": /^\\t/,
      "Yx": /^\\x/,
      "Yq": /^\\q\[([^\]]+)\]/,
      "Y_aB": /^\\_a\[([^\]]+)\]/,
      "Y_aE": /^\\_a/,
      "YnH": /^\\n\[half\]/,
      "Yn": /^\\n/,
      "Yc": /^\\c/,
      "Ye": /^\\e/,
      "YY": /^\\\\/
    };
    (recur = (function(_this) {
      return function() {
        var id, title, _ref, _script;
        if (script.length === 0) {
          _this.playing = false;
          _this.breakTid = setTimeout((function() {
            return _this["break"]();
          }), 10000);
          return;
        }
        wait = 80;
        switch (true) {
          case reg["Y0"].test(script):
            _script = script.replace(reg["Y0"], "");
            _this.named.scope(0).blimp(0);
            break;
          case reg["Y1"].test(script):
            _script = script.replace(reg["Y1"], "");
            _this.named.scope(1).blimp(0);
            break;
          case reg["Yh"].test(script):
            _script = script.replace(reg["Yh"], "");
            _this.named.scope(0).blimp(0);
            break;
          case reg["Yu"].test(script):
            _script = script.replace(reg["Yu"], "");
            _this.named.scope(1).blimp(0);
            break;
          case reg["Yp"].test(script):
            _script = script.replace(reg["Yp"], "");
            _this.named.scope(Number(reg["Yp"].exec(script)[1]));
            break;
          case reg["Ypn"].test(script):
            _script = script.replace(reg["Ypn"], "");
            _this.named.scope(Number(reg["Ypn"].exec(script)[1]));
            break;
          case reg["Ysn"].test(script):
            _script = script.replace(reg["Ysn"], "");
            _this.named.scope().surface(Number(reg["Ysn"].exec(script)[1]));
            break;
          case reg["Ys"].test(script):
            _script = script.replace(reg["Ys"], "");
            _this.named.scope().surface(Number(reg["Ys"].exec(script)[1]));
            break;
          case reg["Yb"].test(script):
            _script = script.replace(reg["Yb"], "");
            _this.named.scope().blimp(Number(reg["Yb"].exec(script)[1]));
            break;
          case reg["Yi"].test(script):
            _script = script.replace(reg["Yi"], "");
            _this.named.scope().surface().playAnimation(Number(reg["Yi"].exec(script)[1]));
            break;
          case reg["Y_q"].test(script):
            _script = script.replace(reg["Y_q"], "");
            quick = !quick;
            break;
          case reg["YwN"].test(script):
            _script = script.replace(reg["YwN"], "");
            wait = Number(reg["YwN"].exec(script)[1]) * 100;
            break;
          case reg["Y_w"].test(script):
            _script = script.replace(reg["Y_w"], "");
            wait = Number(reg["Y_w"].exec(script)[1]);
            break;
          case reg["Yt"].test(script):
            _script = script.replace(reg["Yt"], "");
            _this.timeCritical = true;
            break;
          case reg["Yq"].test(script):
            _script = script.replace(reg["Yq"], "");
            _ref = reg["Yq"].exec(script)[1].split(",", 2), title = _ref[0], id = _ref[1];
            _this.named.scope().blimp().choice(title, id);
            break;
          case reg["Y_aB"].test(script):
            _script = script.replace(reg["Y_aB"], "");
            id = reg["Y_aB"].exec(script)[1];
            _this.named.scope().blimp().anchorBegin(id);
            break;
          case reg["Y_aE"].test(script):
            _script = script.replace(reg["Y_aE"], "");
            _this.named.scope().blimp().anchorEnd();
            break;
          case reg["YnH"].test(script):
            _script = script.replace(reg["YnH"], "");
            _this.named.scope().blimp().br();
            break;
          case reg["Yn"].test(script):
            _script = script.replace(reg["Yn"], "");
            _this.named.scope().blimp().br();
            break;
          case reg["Yc"].test(script):
            _script = script.replace(reg["Yc"], "");
            _this.named.scope().blimp().clear();
            break;
          case reg["Ye"].test(script):
            _script = "";
            _this.named.scopes.forEach(function(scope) {
              var _ref1;
              return (_ref1 = scope.surface()) != null ? _ref1.YenE() : void 0;
            });
            break;
          case reg["YY"].test(script):
            _script = script.replace(reg["YY"], "");
            _this.named.scope().blimp().talk("\\");
            break;
          default:
            _script = script.slice(1);
            _this.named.scope().blimp().talk(script[0]);
        }
        script = _script;
        wait = (quick ? 0 : wait);
        return _this.breakTid = setTimeout(recur, wait);
      };
    })(this))();
    return void 0;
  };

  SakuraScriptPlayer.prototype["break"] = function() {
    this.playing = false;
    this.timeCritical = false;
    clearTimeout(this.breakTid);
    this.named.scopes.forEach(function(scope) {
      return scope.blimp(-1).clear();
    });
    return void 0;
  };

  return SakuraScriptPlayer;

})();
