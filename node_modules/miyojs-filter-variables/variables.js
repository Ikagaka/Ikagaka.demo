// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var MiyoFilters, Promise, cwd, fs, path, _ref, _ref1;

  if (typeof Promise === "undefined" || Promise === null) {
    if (typeof require !== "undefined" && require !== null) {
      try {
        Promise = require('es6-promise').Promise;
      } catch (_error) {
        Promise = require('bluebird');
      }
    } else {
      if (this.Promise != null) {
        Promise = this.Promise;
      } else if (((_ref = this.ES6Promise) != null ? _ref.Promise : void 0) != null) {
        Promise = this.ES6Promise.Promise;
      }
    }
  }

  if (typeof require !== "undefined" && require !== null) {
    fs = require('fs');
    path = require('path');
  } else {
    fs = this.fs;
    path = this.path;
  }

  if (typeof process !== "undefined" && process !== null) {
    cwd = process.cwd;
  } else {
    cwd = (_ref1 = this.process) != null ? _ref1.cwd : void 0;
  }

  if (this.MiyoFilters != null) {
    MiyoFilters = this.MiyoFilters;
  } else {
    MiyoFilters = {};
  }

  MiyoFilters.variables_initialize = {
    type: 'through',
    filter: function(argument, request, id, stash) {
      this.variables = {};
      this.variables_temporary = {};
      this.variables_load = (function(_this) {
        return function(file) {
          if ((fs != null) && (path != null) && (cwd != null)) {
            return new Promise(function(resolve, reject) {
              var file_path;
              file_path = path.join(cwd(), file);
              return fs.readFile(file_path, 'utf8', function(error, json_str) {
                if (error) {
                  return reject(error);
                }
                try {
                  _this.variables = JSON.parse(json_str);
                } catch (_error) {
                  error = _error;
                  return reject(error);
                }
                return resolve();
              });
            });
          } else {
            return new Promise(function(resolve, reject) {
              return resolve();
            });
          }
        };
      })(this);
      this.variables_save = (function(_this) {
        return function(file) {
          if ((fs != null) && (path != null) && (cwd != null)) {
            return new Promise(function(resolve, reject) {
              var file_path, json_str;
              file_path = path.join(cwd(), file);
              json_str = JSON.stringify(_this.variables);
              return fs.writeFile(file_path, json_str, 'utf8', function(error) {
                if (error) {
                  return reject(error);
                }
                return resolve();
              });
            });
          } else {
            return new Promise(function(resolve, reject) {
              return resolve();
            });
          }
        };
      })(this);
      return argument;
    }
  };

  MiyoFilters.variables_load = {
    type: 'through',
    filter: function(argument, request, id, stash) {
      var _ref2;
      if ((argument != null ? (_ref2 = argument.variables_load) != null ? _ref2.file : void 0 : void 0) == null) {
        throw 'argument.variables_load.file undefined';
      }
      return this.variables_load(argument.variables_load.file).then(function() {
        return argument;
      })["catch"]((function(_this) {
        return function(error) {
          if (_this.has_property(argument.variables_load, 'error')) {
            return _this.property(argument.variables_load, 'error', request, id, {
              error: error,
              argument: argument
            });
          } else {
            return argument;
          }
        };
      })(this));
    }
  };

  MiyoFilters.variables_save = {
    type: 'through',
    filter: function(argument, request, id, stash) {
      var _ref2;
      if ((argument != null ? (_ref2 = argument.variables_save) != null ? _ref2.file : void 0 : void 0) == null) {
        throw 'argument.variables_save.file undefined';
      }
      return this.variables_save(argument.variables_save.file).then(function() {
        return argument;
      })["catch"]((function(_this) {
        return function(error) {
          if (_this.has_property(argument.variables_save, 'error')) {
            return _this.property(argument.variables_save, 'error', request, id, {
              error: error,
              argument: argument
            });
          } else {
            return argument;
          }
        };
      })(this));
    }
  };

  MiyoFilters.variables_set = {
    type: 'through',
    filter: function(argument, request, id, stash) {
      var name, pname;
      if ((argument != null ? argument.variables_set : void 0) == null) {
        throw 'argument.variables_set undefined';
      }
      for (name in argument.variables_set) {
        pname = name.replace(/\.[^.]+$/);
        this.variables[name] = this.property(argument.variables_set, pname, request, id, stash);
      }
      return argument;
    }
  };

  MiyoFilters.variables_delete = {
    type: 'through',
    filter: function(argument, request, id, stash) {
      var name, _i, _len, _ref2;
      if ((argument != null ? argument.variables_delete : void 0) == null) {
        throw 'argument.variables_delete undefined';
      }
      _ref2 = argument.variables_delete;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        name = _ref2[_i];
        delete this.variables[name];
      }
      return argument;
    }
  };

  MiyoFilters.variables_temporary_set = {
    type: 'through',
    filter: function(argument, request, id, stash) {
      var name, pname, value, _ref2;
      if ((argument != null ? argument.variables_temporary_set : void 0) == null) {
        throw 'argument.variables_temporary_set undefined';
      }
      _ref2 = argument.variables_temporary_set;
      for (name in _ref2) {
        value = _ref2[name];
        pname = name.replace(/\.[^.]+$/);
        this.variables_temporary[name] = this.property(argument.variables_temporary_set, pname, request, id, stash);
      }
      return argument;
    }
  };

  MiyoFilters.variables_temporary_delete = {
    type: 'through',
    filter: function(argument, request, id, stash) {
      var name, _i, _len, _ref2;
      if ((argument != null ? argument.variables_temporary_delete : void 0) == null) {
        throw 'argument.variables_temporary_delete undefined';
      }
      _ref2 = argument.variables_temporary_delete;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        name = _ref2[_i];
        delete this.variables_temporary[name];
      }
      return argument;
    }
  };

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = MiyoFilters;
  } else {
    this.MiyoFilters = MiyoFilters;
  }

}).call(this);
