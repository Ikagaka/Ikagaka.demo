{
  "name": "miyojs",
  "version": "2.0.3",
  "description": "MiyoJS - SHIORI subsystem Miyo for JavaScript",
  "keywords": [
    "miyojs"
  ],
  "homepage": "https://github.com/Narazaka/miyojs/blob/master/Readme.ja.md",
  "main": "index.js",
  "bin": {
    "miyo-shiolink": "bin/miyo-shiolink.js"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "js-yaml": ">= 3.0.2",
    "shiorijk": "^0.0.1",
    "shiolinkjs": "^1.0.0",
    "es6-promise": "^2.0.0"
  },
  "devDependencies": {
    "coffee-script": ">= 1.8.0",
    "mocha": ">= 1.18.2",
    "mocha-phantomjs": ">= 3.5.1",
    "chai": ">= 1.9.0",
    "chai-as-promised": ">= 4.1.1",
    "sinon": ">= 1.10.3",
    "istanbul": ">= 0.3.2",
    "jade": ">= 1.0.2",
    "codo": ">= 2.0.8"
  },
  "author": {
    "name": "narazaka",
    "url": "http://narazaka.net/"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/Narazaka/miyojs.git"
  },
  "readmeFilename": "Readme.ja.md",
  "readme": "MiyoJS - SHIORIサブシステム「美代」 for JavaScript\r\n===============================================\r\n\r\nMiyo(美代)とは\r\n-----------------------\r\n\r\nMiyo(美代)は伺か用のSHIORI(栞)サブシステムです。\r\n\r\n標準でYAMLによる簡潔で記述し易い辞書形式MiyoDictionaryを用いつつ、フィルタによりあらゆるプログラムコードの実行をサポートします。\r\n\r\nMiyoJSとは\r\n-----------------------\r\n\r\nMiyoの仕様を満たしたJavaScriptによる栞の実装です。\r\n\r\n今のところ唯一の実装ですが、今後他言語版も作るかどうかは未定です。\r\n\r\n以下で「Miyo」と記述してあるところはMiyo一般のことであり、JavaScript版であるMiyoJS特有のことではないということを示しています。\r\nMiyoはMiyoJSに読み替えることが可能です。\r\n\r\nコンセプト\r\n-----------------------\r\n\r\n新しい栞には新しいコンセプトが必要です。\r\n\r\nMiyoは汎用言語の採用および簡潔かつ一貫した機能と徹底した役割分離により、プログラミング的に保守性の高いゴースト作成ができるSHIORIを目指しています。\r\n\r\nMiyoが本質的にサポートするのは素のSHIORIプロトコルとの変換と辞書の制御程度の非常に限定的な部分です。\r\n\r\nSHIORIサブシステムのrequestをSHIORI/3.0 ID別に分けて呼び出すことを基本としますが、普通干渉しないload、unloadをも制御できます。\r\n一貫した動作を目指すことにより、多くのSHIORIサブシステムが内部で勝手に返すID: version等も全て辞書にゆだねられています。\r\n\r\nさらに辞書から任意引数を渡せるフィルタ関数をサポートし、処理とデータを分離しつつ自由な処理ができる構造になっています。\r\nこれによってMiyoが辞書の枠組みに特化した基本的な機能のみを提供しつつ、その他の様々な機能は個別のフィルタとして随時選んで追加することが可能となり、透明性とメンテナンス性の高いゴースト制作が可能となります。\r\n\r\n名前について\r\n-----------------------\r\n\r\n伺かのSHIORIサブシステムには伝統的に女性名をあてるので、拙作の漫画のキャラクターから名前を取り美代(みよ)と名づけました。\r\n\r\n使用方法\r\n-----------------------\r\n\r\n### 栞として\r\n\r\nここではゴーストに組み込んで使用する方法を示します。\r\n\r\n`/ghost/master`ディレクトリをカレントとして\r\n\r\n    npm install miyojs\r\n\r\nを実行します。\r\n\r\n次に、[node.js](http://nodejs.org/)実行環境のnode.exeを適当な場所に配置します。\r\n\r\nさらに[SHIOLINK](https://code.google.com/p/shiori-basic/downloads/)を入手し、SHIOLINK.dllとSHIOLINK.iniを`/ghost/master`ディレクトリに配置します。\r\n\r\nそしてSHIOLINK.iniを編集し、\r\n\r\n    commandline = path\\to\\node.exe .\\node_modules\\miyojs\\bin\\miyo-shiolink.js path\\to\\dictionaries\r\n\r\nと設定します。\r\n\r\n`path\\to\\dictionaries`はMiyoDictionary辞書ファイルを配置するディレクトリです。\r\n\r\nこの部分はアーカイブ済みサンプルゴーストを使うことでスキップできます。\r\n\r\n### ライブラリとしてのインストール\r\n\r\n    npm install miyojs\r\n\r\nライブラリとしての使用方法は後述の__MiyoJSリファレンス__を参照してください。\r\n\r\nサンプルゴースト\r\n-----------------------\r\n\r\nゴーストの機能プレビュー兼テンプレート代替として、サンプルゴースト[MiyoPreview](http://narazaka.net/c/ukagaka/)を公開しています。\r\n\r\n依存関係\r\n-----------------------\r\n\r\nSHIORIプロトコルの処理に[ShioriJK](https://github.com/Narazaka/shiorijk.git)、SHIOLINKインターフェースに[ShiolinkJS](https://github.com/Narazaka/shiolinkjs.git)、YAML形式の辞書の読み込みに[js-yaml](https://github.com/nodeca/js-yaml.git)を利用しています。\r\n\r\nドキュメント\r\n-----------------------\r\n\r\n- [MiyoJSの動作全般について](doc/miyojs_flow.ja.md)\r\n- [MiyoDictionary形式辞書](doc/miyo_dictionary.ja.md)\r\n- [フィルタの利用と作成](doc/miyojs_filter.ja.md)\r\n- [MiyoJSリファレンス](doc/miyojs_reference.ja.md)\r\n\r\n関連リソース\r\n-----------------------\r\n\r\n公開されたフィルタの一覧は[miyojs-filters](https://github.com/Narazaka/miyojs-filters/wiki)にまとまっています。\r\n\r\nライセンス\r\n--------------------------\r\n\r\n[MITライセンス](http://narazaka.net/license/MIT?2014)の元で配布いたします。\r\n",
  "bugs": {
    "url": "https://github.com/Narazaka/miyojs/issues"
  },
  "_id": "miyojs@2.0.3",
  "_shasum": "5b52e53a01d6500dba964b24867d0d4beb6f71db",
  "_from": "miyojs@*"
}
