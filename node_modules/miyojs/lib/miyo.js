// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var Miyo, MiyoFilters, Promise, ShioriJK, fs, jsyaml, path, _ref;

  if (typeof require !== "undefined" && require !== null) {
    ShioriJK = require('shiorijk');
    if (typeof Promise === "undefined" || Promise === null) {
      try {
        Promise = require('es6-promise').Promise;
      } catch (_error) {
        Promise = require('bluebird');
      }
    }
  } else {
    if (this.Promise != null) {
      Promise = this.Promise;
    } else if (((_ref = this.ES6Promise) != null ? _ref.Promise : void 0) != null) {
      Promise = this.ES6Promise.Promise;
    }
    ShioriJK = this.ShioriJK;
    if (this.MiyoFilters != null) {
      MiyoFilters = this.MiyoFilters;
    }
  }

  Miyo = (function() {
    function Miyo(dictionary) {
      this.dictionary = dictionary;
      this.filters = {
        miyo_require_filters: {
          type: 'through',
          filter: function(argument) {
            var file, filter, filters, name, path, _i, _len, _ref1;
            if (typeof require !== "undefined" && require !== null) {
              path = require('path');
              _ref1 = argument.miyo_require_filters;
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                file = _ref1[_i];
                if (file.match(/^\.*\//)) {
                  filters = require(path.join(process.cwd(), file));
                } else {
                  filters = require('miyojs-filter-' + file);
                }
                for (name in filters) {
                  filter = filters[name];
                  this.filters[name] = filter;
                }
              }
            } else if (MiyoFilters != null) {
              for (name in MiyoFilters) {
                this.filters[name] = MiyoFilters[name];
              }
            } else {
              throw 'miyo_require_filters: filter source not found.';
            }
            return argument;
          }
        }
      };
      this.default_response_headers = {};
      this.value_filters = [];
    }

    Miyo.prototype.load = function(directory) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          _this.shiori_dll_directory = directory;
          return resolve(_this.call_id('_load', null));
        };
      })(this)).then(function() {});
    };

    Miyo.prototype.unload = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return resolve(_this.call_id('_unload', null));
        };
      })(this)).then(function() {
        if (typeof process !== "undefined" && process !== null) {
          process.exit();
        }
      });
    };

    Miyo.prototype.request = function(request) {
      if (request.request_line.version === '3.0') {
        return new Promise((function(_this) {
          return function(resolve, reject) {
            return resolve(_this.call_id(request.headers.get('ID'), request));
          };
        })(this)).then((function(_this) {
          return function(response) {
            if (!(response instanceof ShioriJK.Message.Response)) {
              response = _this.make_value(response, request);
            }
            return "" + response;
          };
        })(this))["catch"]((function(_this) {
          return function(error) {
            return _this.make_internal_server_error(error, request);
          };
        })(this));
      } else {
        return new Promise((function(_this) {
          return function(resolve, reject) {
            return resolve(_this.make_bad_request(request));
          };
        })(this));
      }
    };

    Miyo.prototype.call_id = function(id, request, stash) {
      var entry;
      entry = this.dictionary[id];
      if (request === null) {
        if (entry != null) {
          return this.call_entry(entry, request, id, stash);
        } else {
          return new Promise(function(resolve, reject) {
            return resolve();
          });
        }
      } else {
        return this.call_entry(entry, request, id, stash);
      }
    };

    Miyo.prototype.call_entry = function(entry, request, id, stash) {
      if (entry != null) {
        if (entry instanceof Array) {
          return this.call_list(entry, request, id, stash);
        } else if (entry instanceof Object) {
          return this.call_filters(entry, request, id, stash);
        } else {
          return this.call_value(entry, request, id, stash);
        }
      } else {
        return this.call_not_found(entry, request, id, stash);
      }
    };

    Miyo.prototype.call_value = function(entry, request, id, stash) {
      var filter_names, value;
      value = entry;
      filter_names = this.value_filters;
      return this._process_filters('value', 'value', this.value_filters, value, request, id, stash);
    };

    Miyo.prototype.call_list = function(entry, request, id, stash) {
      return this.call_entry(entry[Math.floor(Math.random() * entry.length)], request, id, stash);
    };

    Miyo.prototype.call_filters = function(entry, request, id, stash) {
      var argument, filter_names;
      argument = entry.argument;
      if (entry.filters instanceof Array) {
        filter_names = entry.filters;
      } else {
        filter_names = [entry.filters];
      }
      return this._process_filters('data', 'value', filter_names, argument, request, id, stash);
    };

    Miyo.prototype._process_filters = function(input_type, output_type, filter_names, argument, request, id, stash) {
      var filter_name, promise, type, _i, _len;
      if (stash == null) {
        stash = {};
      }
      type = input_type;
      promise = new Promise(function(resolve, reject) {
        return resolve(argument);
      });
      for (_i = 0, _len = filter_names.length; _i < _len; _i++) {
        filter_name = filter_names[_i];
        promise = promise.then(((function(_this) {
          return function(filter_name) {
            return function(argument) {
              var filter, filter_types, input, output;
              filter = _this.filters[filter_name];
              if (filter == null) {
                throw "filter [" + filter_name + "] not found";
              }
              if (filter.filter == null) {
                throw "filter [" + filter_name + "] function is undefined";
              }
              filter_types = Miyo.filter_types[filter.type];
              if (!filter_types) {
                throw "filter [" + filter_name + "] has invalid filter type '" + filter.type + "'";
              }
              input = filter_types.input, output = filter_types.output;
              if (input === type || input === 'through' || input === 'any') {
                if (output !== 'through') {
                  type = output;
                }
              } else {
                throw "filter [" + filter_name + "] input type '" + input + "' is inconsistent with previous output type '" + type + "'";
              }
              argument = filter.filter.call(_this, argument, request, id, stash);
              return argument;
            };
          };
        })(this))(filter_name));
      }
      promise = promise.then(function(argument) {
        if (!((request == null) || type === output_type)) {
          throw "filters final output type '" + type + "' is inconsistent with final output type 'value'";
        }
        return argument;
      });
      return promise;
    };

    Miyo.prototype.call_not_found = function(entry, request, id, stash) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return resolve(_this.make_bad_request(request));
        };
      })(this));
    };

    Miyo.prototype.build_response = function() {
      return new ShioriJK.Message.Response();
    };

    Miyo.prototype.make_value = function(value, request) {
      var content, name, response, _ref1;
      if (value != null) {
        value = "" + value;
      }
      response = this.build_response();
      response.status_line.protocol = 'SHIORI';
      response.status_line.version = '3.0';
      response.status_line.code = (value != null ? value.length : void 0) ? 200 : 204;
      _ref1 = this.default_response_headers;
      for (name in _ref1) {
        content = _ref1[name];
        response.headers.set(name, content);
      }
      if (value != null ? value.length : void 0) {
        response.headers.set('Value', value.replace(/[\r\n]/g, ''));
      }
      return response;
    };

    Miyo.prototype.make_bad_request = function(request) {
      var content, name, response, _ref1;
      response = this.build_response();
      response.status_line.protocol = 'SHIORI';
      response.status_line.version = '3.0';
      response.status_line.code = 400;
      _ref1 = this.default_response_headers;
      for (name in _ref1) {
        content = _ref1[name];
        response.headers.set(name, content);
      }
      return response;
    };

    Miyo.prototype.make_internal_server_error = function(error, request) {
      var content, name, response, _ref1;
      response = this.build_response();
      response.status_line.protocol = 'SHIORI';
      response.status_line.version = '3.0';
      response.status_line.code = 500;
      _ref1 = this.default_response_headers;
      for (name in _ref1) {
        content = _ref1[name];
        response.headers.set(name, content);
      }
      if (error) {
        response.headers.set('X-Miyo-Error', ("" + error).replace(/\r/g, '\\r').replace(/\n/g, '\\n'));
      }
      return response;
    };

    return Miyo;

  })();

  Miyo.filter_types = {
    'through': {
      input: 'through',
      output: 'through'
    },
    'data-data': {
      input: 'data',
      output: 'data'
    },
    'data-value': {
      input: 'data',
      output: 'value'
    },
    'value-value': {
      input: 'value',
      output: 'value'
    },
    'any-value': {
      input: 'any',
      output: 'value'
    }
  };

  if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
    module.exports = Miyo;
  } else {
    this.Miyo = Miyo;
  }

  if (typeof require !== "undefined" && require !== null) {
    fs = require('fs');
    path = require('path');
    jsyaml = require('js-yaml');
  }

  Miyo.DictionaryLoader = {
    load_recursive: function(directory) {
      var dictionary, dictionary_part, element, element_path, elements, error, _i, _len;
      dictionary = null;
      elements = fs.readdirSync(directory);
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        element = elements[_i];
        element_path = path.join(directory, element);
        dictionary_part = null;
        if (fs.statSync(element_path).isDirectory()) {
          dictionary_part = this.load_recursive(element_path);
        } else if (path.extname(element_path) === '.yaml') {
          dictionary_part = this.load(element_path);
        }
        if (dictionary_part != null) {
          if (dictionary == null) {
            dictionary = {};
          }
          try {
            this.merge_dictionary(dictionary_part, dictionary);
          } catch (_error) {
            error = _error;
            throw "processing directories in [" + element_path + "]\n" + error;
          }
        }
      }
      return dictionary;
    },
    load: function(file) {
      var yaml_str;
      yaml_str = fs.readFileSync(file, 'utf8').replace(/\t/g, ' ');
      return jsyaml.safeLoad(yaml_str);
    },
    merge_dictionary: function(source, destination) {
      var d_entry, d_is_array, id, key, s_entry, s_is_array, value;
      for (id in source) {
        s_entry = source[id];
        if (destination[id] != null) {
          d_entry = destination[id];
          s_is_array = s_entry instanceof Array;
          d_is_array = d_entry instanceof Array;
          if (s_is_array && d_is_array) {
            destination[id] = d_entry.concat(s_entry);
          } else if (!s_is_array && !d_is_array) {
            for (key in s_entry) {
              value = s_entry[key];
              if (d_entry[key] != null) {
                throw "Dictionary Load Error: entry [" + id + "] has duplicated key [" + key + "]";
              } else {
                d_entry[key] = s_entry[key];
              }
            }
          } else {
            throw "Dictionary Load Error: entry [" + id + "] is duplicated and has unmatch contents";
          }
        } else {
          destination[id] = source[id];
        }
      }
    }
  };

}).call(this);
