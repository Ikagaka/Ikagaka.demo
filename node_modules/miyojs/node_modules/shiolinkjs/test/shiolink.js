// Generated by CoffeeScript 1.8.0
(function() {
  var FakeShioriEngine, ShiolinkJS, ShioriJK, chai, chaiAsPromised, sinon;

  if (typeof require !== "undefined" && require !== null) {
    chai = require('chai');
  } else {
    chai = this.chai;
  }

  chai.should();

  if (typeof require !== "undefined" && require !== null) {
    chaiAsPromised = require('chai-as-promised');
  } else {
    chaiAsPromised = this.chaiAsPromised;
  }

  chai.use(chaiAsPromised);

  if (typeof require !== "undefined" && require !== null) {
    sinon = require('sinon');
    ShiolinkJS = require('../lib/shiolink.js');
    ShioriJK = require('shiorijk');
  } else {
    sinon = this.sinon;
    ShiolinkJS = this.ShiolinkJS;
    ShioriJK = this.ShioriJK;
  }

  FakeShioriEngine = (function() {
    function FakeShioriEngine() {}

    FakeShioriEngine.prototype.load = function(dir) {};

    FakeShioriEngine.prototype.unload = function() {};

    FakeShioriEngine.prototype.request = function(request) {
      var response;
      response = null;
      if (request.request_line.version === '3.0') {
        switch (request.headers.get('ID')) {
          case 'version':
            response = new ShioriJK.Message.Response();
            response.status_line.version = '3.0';
            response.status_line.code = 200;
            response.headers.set('Charset', 'UTF-8');
            response.headers.set('Value', '0.1');
            break;
          default:
            response = new ShioriJK.Message.Response();
            response.status_line.version = '3.0';
            response.status_line.code = 400;
            response.headers.set('Charset', 'UTF-8');
        }
      } else {
        response = new ShioriJK.Message.Response();
        response.status_line.version = '3.0';
        response.status_line.code = 400;
        response.headers.set('Charset', 'UTF-8');
      }
      return response;
    };

    return FakeShioriEngine;

  })();

  describe('shiolinkjs', function() {
    var engine, ns, spy_load, spy_request, spy_unload;
    ns = null;
    engine = null;
    spy_load = null;
    spy_unload = null;
    spy_request = null;
    beforeEach(function() {
      engine = new FakeShioriEngine();
      spy_load = sinon.spy(engine, 'load');
      spy_unload = sinon.spy(engine, 'unload');
      spy_request = sinon.spy(engine, 'request');
      return ns = new ShiolinkJS(engine);
    });
    it('can parse shiolink load/unload', function() {
      return ns.add_chunk('*L:C:\\ukagaka\n*U:'.replace(/\r?\n/g, '\r\n')).then(function() {
        spy_load.callCount.should.be.equal(1);
        spy_unload.callCount.should.be.equal(1);
        return spy_load.calledWith('C:\\ukagaka').should.be["true"];
      });
    });
    return it('can parse shiolink', function() {
      return ns.add_chunk('*L:C:\\ukagaka\n*S:qawsedrftgyhujikolp\nGET Version SHIORI/2.6\nCharset: UTF-8\nSender: SSP\n\n*S:1234\nGET SHIORI/3.0\nID: version\nCharset: UTF-8\nSender: SSP\n\n*U:'.replace(/\r?\n/g, '\r\n')).then(function(result) {
        var request, requests;
        result.should.be.deep.equal('*S:qawsedrftgyhujikolp\nSHIORI/3.0 400 Bad Request\nCharset: UTF-8\n\n*S:1234\nSHIORI/3.0 200 OK\nCharset: UTF-8\nValue: 0.1\n\n'.replace(/\r?\n/g, '\r\n'));
        spy_load.callCount.should.be.equal(1);
        spy_unload.callCount.should.be.equal(1);
        spy_load.calledWith('C:\\ukagaka').should.be["true"];
        spy_request.callCount.should.be.equal(2);
        requests = [spy_request.getCall(0), spy_request.getCall(1)];
        request = new ShioriJK.Message.Request();
        request.request_line.protocol = 'SHIORI';
        request.request_line.version = '2.6';
        request.request_line.method = 'GET Version';
        request.headers.set('Charset', 'UTF-8');
        request.headers.set('Sender', 'SSP');
        requests[0].args.should.be.deep.equal([request]);
        request = new ShioriJK.Message.Request();
        request.request_line.protocol = 'SHIORI';
        request.request_line.version = '3.0';
        request.request_line.method = 'GET';
        request.headers.set('ID', 'version');
        request.headers.set('Charset', 'UTF-8');
        request.headers.set('Sender', 'SSP');
        return requests[1].args.should.be.deep.equal([request]);
      }).should.eventually.be.fulfilled;
    });
  });

}).call(this);
