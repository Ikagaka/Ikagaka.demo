// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var Promise, ShiolinkJS, ShioriJK, _ref;

  if (typeof require !== "undefined" && require !== null) {
    ShioriJK = require('shiorijk');
    if (typeof Promise === "undefined" || Promise === null) {
      try {
        Promise = require('es6-promise').Promise;
      } catch (_error) {
        Promise = require('bluebird');
      }
    }
  } else {
    if (this.Promise != null) {
      Promise = this.Promise;
    } else if (((_ref = this.ES6Promise) != null ? _ref.Promise : void 0) != null) {
      Promise = this.ES6Promise.Promise;
    }
    ShioriJK = this.ShioriJK;
  }

  ShiolinkJS = (function() {
    function ShiolinkJS(engine) {
      this.engine = engine;
      this.request_parser = new ShioriJK.Shiori.Request.Parser();
      this.state = 'shiolink';
    }

    ShiolinkJS.prototype.engine = null;

    ShiolinkJS.prototype.request_parser = null;

    ShiolinkJS.prototype.shiolink_load = function(directory) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return resolve(_this.engine.load(directory));
        };
      })(this)).then(function() {});
    };

    ShiolinkJS.prototype.shiolink_request = function(id) {
      this.state = 'request';
      return new Promise(function(resolve, reject) {
        return resolve("*S:" + id + "\r\n");
      });
    };

    ShiolinkJS.prototype.shiolink_unload = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return resolve(_this.engine.unload());
        };
      })(this)).then(function() {});
    };

    ShiolinkJS.prototype.add_chunk = function(chunk) {
      var lines;
      lines = chunk.split(/\r\n/);
      if (chunk.match(/\r\n$/)) {
        lines.pop();
      }
      return this.add_lines(lines);
    };

    ShiolinkJS.prototype.add_lines = function(lines) {
      var line, promise, _i, _len;
      promise = new Promise(function(resolve, reject) {
        return resolve([]);
      });
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        promise = promise.then(((function(_this) {
          return function(line) {
            return function(results) {
              return _this.add_line(line).then(function(result) {
                if (result != null) {
                  results.push(result);
                }
                return results;
              });
            };
          };
        })(this))(line));
      }
      return promise.then(function(results) {
        return results.join('');
      });
    };

    ShiolinkJS.prototype.add_line = function(line) {
      var parser_result, result;
      switch (this.state) {
        case 'shiolink':
          if (result = line.match(/^\*(L|S|U):(.*)$/)) {
            switch (result[1]) {
              case 'L':
                return this.shiolink_load(result[2]);
              case 'S':
                return this.shiolink_request(result[2]);
              case 'U':
                return this.shiolink_unload(result[2]);
            }
          }
          break;
        case 'request':
          parser_result = this.request_parser.parse_line(line);
          if (parser_result.state === 'end') {
            this.state = 'shiolink';
            return new Promise((function(_this) {
              return function(resolve, reject) {
                return resolve(_this.engine.request(parser_result.result));
              };
            })(this)).then(function(response) {
              return "" + response;
            })["catch"](function(error) {
              var response;
              response = new ShioriJK.Message.Response();
              response.status_line.protocol = 'SHIORI';
              response.status_line.version = '3.0';
              response.status_line.code = 500;
              response.headers.set('X-ShiolinkJS-Error', ("" + error).replace(/\r/g, '\\r').replace(/\n/g, '\\n'));
              return "" + response;
            });
          }
      }
      return new Promise(function(resolve, reject) {
        return resolve();
      });
    };

    return ShiolinkJS;

  })();

  if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
    module.exports = ShiolinkJS;
  } else {
    this.ShiolinkJS = ShiolinkJS;
  }

}).call(this);
