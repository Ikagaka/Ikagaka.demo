{
  "name": "miyojs-filter-autotalks",
  "version": "1.0.1",
  "description": "autotalks - useful for AITalks",
  "keywords": [
    "miyojs",
    "miyojs-filter"
  ],
  "main": "autotalks.js",
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "partperiod": ">= 0.0.1"
  },
  "devDependencies": {
    "coffee-script": ">= 1.8.0",
    "mocha": ">= 1.20.1",
    "chai": ">= 1.9.2",
    "sinon": ">= 1.10.3",
    "istanbul": ">= 0.3.2",
    "miyojs": ">= 1.0.3",
    "miyojs-filter-property": ">= 1.0.0",
    "miyojs-filter-variables": ">= 1.0.0"
  },
  "author": {
    "name": "narazaka",
    "url": "http://narazaka.net/"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/Narazaka/miyojs-filter-autotalks.git"
  },
  "readme": "autotalks - AIトークを便利に\r\n========================================\r\n\r\nこれはなにか\r\n----------------------------------------\r\n\r\nこれは伺か用SHIORIサブシステムである美代(Miyo)の辞書フィルタプラグインです。\r\n\r\nゴーストによるユーザーの操作以外での自動発話、通称AIトークでよく使われる機能を提供するフィルタです。\r\n\r\nインストール\r\n----------------------------------------\r\n\r\n### 一般\r\n\r\n    npm install miyojs-filter-autotalks\r\n\r\n### ゴーストに追加する場合\r\n\r\nghost/masterをカレントディレクトリとして同様に\r\n\r\n    npm install miyojs-filter-autotalks\r\n\r\n含まれるフィルタ\r\n----------------------------------------\r\n\r\n### autotalks\r\n\r\n自動発話の内容を処理するフィルタです。\r\n\r\nargumentのうちautotalksを使います。\r\n\r\n### autotalks_caller\r\n\r\n自動発話の間隔等を管理するフィルタです。\r\n\r\nargumentのうちautotalks_callerを使います。\r\n\r\n依存\r\n----------------------------------------\r\n\r\nこのフィルタは以下に依存します。\r\n\r\n- [miyojs-filter-variables](https://github.com/Narazaka/miyojs-filter-variables.git)\r\n- [miyojs-filter-property](https://github.com/Narazaka/miyojs-filter-property.git)\r\n- [partperiod](https://www.npmjs.org/package/partperiod)\r\n\r\n使用方法\r\n----------------------------------------\r\n\r\nMiyoの辞書ファイルのエントリにフィルタを追加します。\r\n\r\n    OnAITalk:\r\n    \tfilters: [autotalks]\r\n\r\n### autotalks\r\n\r\n自動発話の内容(Value)を返します。\r\n\r\n受け取ったstashにautotalks_triggerがあればそれが真のときのみ、なければ常に実行されます。\r\nただし以下で言及するjusttime条件をもった発話はその条件が整ったときautotalks_triggerに関わらず常に発話されます。\r\n\r\nargumentのautotalks以下に自動発話の内容を記述します。\r\n\r\n    OnAITalk:\r\n    \tfilters: [autotalks]\r\n    \targument:\r\n    \t\tautotalks:\r\n    \t\t\t-\r\n    \t\t\t\twhen:\r\n    \t\t\t\t\tperiod.jse: (@2012-*-*/2013-*-*@ && @*-10-12/*-10-16@)\r\n    #\t\t\t\t\tjusttime: 1\r\n    \t\t\t\t\tonce: id\r\n    #\t\t\t\t\tonce_per_boot : id\r\n    \t\t\t\t\tcondition.jse: true == 1\r\n    \t\t\t\tpriority: 2\r\n    \t\t\t\tbias: 3\r\n    \t\t\t\tdo:\r\n    \t\t\t\t\t- \\h\\s[0]\\e\r\n    #\t\t\t\tchain:\r\n    #\t\t\t\t\t- \\h\\s[0]\\e\r\n\r\nautotalks以下にそれぞれの条件をもった発話を配列として記述します。\r\nこの配列の順番は意味を持ちません。\r\n\r\nこの配列の各要素はそれぞれ以下の属性を持ちます。\r\n\r\nこれらの属性以外は無視されるので、識別等に使うことが出来ます。\r\n\r\n#### when\r\n\r\n条件の設定を記述します。\r\n\r\n以下の属性を持ちます。\r\n\r\n以下のうちの指定された属性の条件をすべて満たした場合のみ発話可能となります(AND)。\r\n\r\n下記属性にはpropertyフィルタのproperty()が使われている場合がありますが、詳細についてはpropertyフィルタのドキュメントをご覧ください。\r\n\r\nproperty()が使われている属性はキャッシュされるので実行中の値の書き換えを推奨されません。値を実行中に変更したい場合はコードとして指定してください。\r\n\r\n##### period - 期間の指定\r\n\r\nこの属性が有る場合、指定された期間にのみ発話します。\r\n\r\n通常はperiod.jse, period.coffee等の名前でコードとして指定します(propertyの機能)。\r\n\r\nただし指定された文字列はあらかじめ'@...@'を'(new PartPeriod(...)).includes(date)'に置換されます。\r\n\r\nつまり'@...@'の'@'の間にPartPeriodによって解釈できる期間文字列を記述し、それが現在の日付と比較されます。\r\n\r\n    period.jse: (@2012-*-*/2013-*-*@ || @*-10-01/*-10-15@) && @12:*/17:*@\r\n\r\nこの値が真を返した場合のみ発話可能となります。\r\n\r\npropertyが提供する変数とともに、現在日時を表すdate変数とPartPeriod変数が使えます。\r\n\r\n**注意** この属性は優先度とは関係ないので、期間中一度も発話されないことも考えられます。それを避けたい場合はpriority属性などを同時に利用してください。\r\n\r\n##### justtime - 期間が来ればすぐ発話する\r\n\r\nこの属性が1である場合、指定された期間にできるだけはやく発話します。\r\n\r\n    justtime: 1\r\n\r\n発話するタイミングであることを通知するautotalks_triggerにかかわらず発話します。\r\n\r\nここに指定された値は最初に実行される前にキャッシュされます。\r\nよってゴーストの実行中にこの値を書き換えることは実行時によって意味を成さず、避けるべきです。\r\n\r\n**注意** この属性は優先度とは関係ないので、autotalks_triggerが発話可能としたときに期間が重なった場合は発話されないことも考えられます。それを避けたい場合はpriority属性などを同時に利用してください\r\n\r\n**注意** この属性を指定する場合、(通常1秒ごとに)フィルタが呼ばれるたびに評価実行されるので、発話中にこの実行を避ける何らかの仕組みを用意する必要があります。またautotalks_triggerが発話可能となっていない場合実質的に優先的に発話されるので、期間を適切に設定したり、when.once属性やwhen.condition属性などを同時に利用してください。\r\n\r\n##### once - 一回のみ\r\n\r\nこの属性が有る場合、ゴーストが初回起動してからアンインストールされるまでに一回のみ発話されます。\r\n\r\n値には一意なID文字列を指定します。\r\n\r\n    once: hoge\r\n\r\nこの文字列は複数の発話に対して指定されてもかまいませんが、その場合発話されるのはそのうち一つのみで、一度も発話されないものが存在することになります。\r\nまたIDはすべてのautotalksで共有されます。\r\n\r\n**注意** この属性は優先度とは関係ないので、一度も発話されないことも考えられます。それを避けたい場合はpriority属性などを同時に利用してください。\r\n\r\n##### once_per_boot - 起動ごとに一回のみ\r\n\r\nこの属性が有る場合、ゴーストが起動してから終了されるまでに一回のみ発話されます。\r\n\r\n指定はonce属性と同一です。\r\n\r\n##### condition - 一般的条件\r\n\r\nこの属性が有る場合、指定された条件が真である場合のみ発話します。\r\n\r\n通常はcondition.jse, condition.coffee等の名前でコードとして指定します(propertyの機能)。\r\n\r\nこの値が真を返した場合のみ発話可能となります。\r\n\r\n    condition.jse: -|\r\n    \tthis.variables.hoge_flag == 'yes'\r\n\r\n#### priority\r\n\r\n優先度を指定します。\r\n\r\n数値的に大小比較できる値をとります。\r\nこの属性がない場合はpriority=0とされます。\r\n\r\n大きな値ほど優先度が高いとされ、その優先度の発話が発話可能であった場合それ以下の優先度の発話は無視されます。\r\n\r\n同じ優先度の場合その中からランダムに選ばれます。\r\n\r\n    priority: 1\r\n\r\npriority.jse等コードとして指定することもできます(propertyの機能)。\r\n\r\n**注意** この属性は常に有効なので一定条件下の制限をつけなければ特定のものばかり発話されることになります。when.once属性やwhen.condition属性などを同時に利用してください。\r\n\r\n#### bias\r\n\r\n発話の頻度を指定します。\r\nこの属性がない発話はbias=1として処理されます。\r\n\r\nbiasの数値で重み付けられた(エントリのbias)/(全エントリのbiasの合計)の確率で発話が選択されます。\r\n\r\nbias.jse等コードとして指定することもできます(propertyの機能)。\r\n\r\n#### do\r\n\r\n発話が選ばれたときに返すエントリを記述します。\r\n\r\nこの内容はトップレベルのイベントエントリ直下の記述と同様にMiyo.prototype.call_entryで処理されるので、この下に配列やfilterを自由に記述できます。\r\n\r\n    do:\r\n    \tfilter: [autotalks]\r\n    \targument:\r\n    \t\t...\r\n\r\n#### chain\r\n\r\n発話が選ばれたときに返すチェイントークを記述します。\r\n\r\ndo属性のかわりに指定します。\r\n両方ある場合はchain属性が優先されます。\r\n\r\n内容は配列で指定します。\r\n\r\n    chain:\r\n    \t- \\h\\s[0]チェイン1\\e\r\n    \t- \\h\\s[0]チェイン2\\e\r\n    \t...\r\n\r\n配列の各内容は1回の発話ごとに順番にMiyo.prototype.call_valueで処理されます。\r\n\r\nこのチェイントークを含む発話は一度選ばれるとその内容すべての発話が終わるまで他のすべての自動発話はなされません。\r\n\r\nwhen.justtime属性をもつ発話のチェイントークの2つ目以降は通常の発話のタイミングでなされます。\r\n\r\n### autotalks_caller\r\n\r\nstashにautotalks_triggerを付加して指定されたIDのエントリをcall_id()して返します。\r\n\r\nautotalks_triggerが真値である場合、自動発話の条件が満たされたことを示します。\r\n\r\n以下で秒数という記述がありますが、これは正確にはこのフィルタが呼ばれた回数であり、OnSecondChangeのたびにこのフィルタが呼ばれることを前提としています。\r\n\r\nargumentのautotalks_caller以下に自動発話の設定を記述します。\r\n\r\n    OnSecondChange:\r\n    \tfilters: [autotalks_caller]\r\n    \targument:\r\n    \t\tautotalks_caller:\r\n    \t\t\tid: OnAITalk\r\n    \t\t\tcount.jse: -|\r\n    \t\t\t\tthis.variables.talk_interval\r\n    \t\t\tfluctuation: 5\r\n\r\n属性は以下の通りです。\r\n\r\n#### id - call_id()するエントリ名\r\n\r\nOnAITalkエントリ等にautotalksフィルタを指定しておいて、そのエントリを呼ぶことを想定しています。\r\n\r\nid.jse等コードとして指定することもできます(propertyの機能)。\r\n\r\n#### count - 通常の自動発話での発話間隔秒数\r\n\r\n発話間隔秒数を指定します。\r\n\r\nこの値は正整数値であるべきです。\r\n\r\ncount.jse等コードとして指定することもできます(propertyの機能)。\r\n\r\nコードによってカウント中にこの値が変わった場合、そのときの値がすぐに使われます。\r\n\r\n#### fluctuation - 通常の自動発話での発話間隔秒数のゆらぎ秒数\r\n\r\ncount属性で指定された秒数±fluctuation属性で指定された秒数で発話します。\r\n\r\nこの属性がない場合、fluctuationは0とされます。\r\n\r\nこの値は正整数値であるべきです。\r\n\r\nfluctuation.jse等コードとして指定することもできます(propertyの機能)。\r\n\r\nコードによってカウント中にこの値が変わった場合、そのときの値がすぐに使われます。\r\n\r\n例\r\n----------------------------------------\r\n\r\n### 一番簡単な例\r\n\r\n60秒に一回ランダムにしゃべるだけの例です。\r\n\r\n    OnSecondChange:\r\n    \tfilters: [autotalks_caller]\r\n    \targument:\r\n    \t\tautotalks_caller:\r\n    \t\t\tid: OnAITalk\r\n    \t\t\tcount: 60\r\n    OnAITalk:\r\n    \tfilters: [autotalks]\r\n    \targument:\r\n    \t\tautotalks:\r\n    \t\t\t-\r\n    \t\t\t\tdo:\r\n    \t\t\t\t\t- \\h\\s[0]AIトーク1です。\\e\r\n    \t\t\t\t\t- \\h\\s[0]AIトーク2です。\\e\r\n\r\n### 入れ子になったautotalks\r\n\r\nautotalksの発話のdo属性はトップレベルのエントリの内容と同様に処理されるのでautotalksを入れ子にすることが可能です。\r\n\r\n    OnSecondChange:\r\n    \tfilters: [autotalks_caller]\r\n    \targument:\r\n    \t\tautotalks_caller:\r\n    \t\t\tid: OnAITalk\r\n    \t\t\tcount: 60\r\n    OnAITalk:\r\n    \tfilters: [autotalks]\r\n    \targument:\r\n    \t\tautotalks:\r\n    \t\t\t-\r\n    \t\t\t\twhen:\r\n    \t\t\t\t\tperiod.jse: @*-*-01/*-*-03@\r\n    \t\t\t\tdo:\r\n    \t\t\t\t\tfilter: [autotalks]\r\n    \t\t\t\t\targument:\r\n    \t\t\t\t\t\tautotalks:\r\n    \t\t\t\t\t\t\t-\r\n    \t\t\t\t\t\t\t\twhen:\r\n    \t\t\t\t\t\t\t\t\tcondition.jse: this.variables.akeome\r\n    \t\t\t\t\t\t\t\tdo:\r\n\t\t\t\t    \t\t\t\t\t- \\h\\s[0]あけおめ。\\e\r\n\r\nonce属性などを指定する場合はIDが全autotalksで効果があることに注意してください。\r\n\r\n### OnMinuteChangeのautotalks\r\n\r\n時報を通知するにはOnSecondChangeに設定したautotalksでjusttimeを使うのもいいですが、OnMinuteChangeで処理することも可能です。\r\n\r\n### 発話のかぶりを防ぐ\r\n\r\nautotalksには発話中であることを判定する機能はありません。\r\nそのためそのまま使用したのでは他のトークの発話中にかぶってしまうことがあったり、justtimeの扱いが難しいなどの問題があります。\r\n\r\nこれを解消するには発話状態を管理するvalue_filterプラグインの[miyojs-filter-talking](https://github.com/Narazaka/miyojs-filter-talking.git)などを利用し、autotalksを呼ぶ前に処理をはさむなどが考えられます。\r\n\r\n    _load :\r\n    \tfilters : [..., append_value_filters, ...]\r\n    \targument :\r\n    \t\tappend_value_filters:\r\n    \t\t\t...\r\n    \t\t\t- talking\r\n    OnSecondChange:\r\n    \tfilters: [conditions]\r\n    \targument:\r\n    \t\tconditions:\r\n    \t\t\t-\r\n    \t\t\t\twhen.jse: this.variables_temporary.talking\r\n    \t\t\t\tdo:\r\n    \t\t\t\t\tfilters: [autotalks_caller]\r\n    \t\t\t\t\targument:\r\n    \t\t\t\t\t\tautotalks_caller:\r\n    \t\t\t\t\t\t\tid: OnAITalk\r\n    \t\t\t\t\t\t\tcount: 60\r\n    OnAITalk:\r\n    \tfilter: [autotalks]\r\n    \targument:\r\n    \t\tautotalks_trigger:\r\n    \t\t\tcount: 60\r\n    \t\tautotalks:\r\n    \t\t\t-\r\n    \t\t\t\tdo:\r\n    \t\t\t\t\t- \\h\\s[0]AIトーク1です。\\e\r\n    \t\t\t\t\t- \\h\\s[0]AIトーク2です。\\e\r\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/Narazaka/miyojs-filter-autotalks/issues"
  },
  "homepage": "https://github.com/Narazaka/miyojs-filter-autotalks",
  "_id": "miyojs-filter-autotalks@1.0.1",
  "_shasum": "f2e8be90441b228796b0122d0dc3c88f1ac02050",
  "_from": "miyojs-filter-autotalks@>=1.0.0 <2.0.0"
}
