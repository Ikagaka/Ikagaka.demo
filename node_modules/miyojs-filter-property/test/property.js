// Generated by CoffeeScript 1.8.0
(function() {
  var Miyo, MiyoFilters, chai, expect, sinon;

  if (typeof require !== "undefined" && require !== null) {
    chai = require('chai');
  } else {
    chai = this.chai;
  }

  chai.should();

  expect = chai.expect;

  if (typeof require !== "undefined" && require !== null) {
    sinon = require('sinon');
    Miyo = require('miyojs');
    MiyoFilters = require('../property.js');
  } else {
    sinon = this.sinon;
    Miyo = this.Miyo;
    MiyoFilters = this.MiyoFilters;
  }

  describe('initialize', function() {
    var id, ms, request, stash;
    ms = null;
    request = null;
    id = null;
    stash = null;
    beforeEach(function() {
      var filter, name;
      ms = new Miyo();
      for (name in MiyoFilters) {
        filter = MiyoFilters[name];
        ms.filters[name] = filter;
      }
      request = sinon.stub();
      id = 'OnTest';
      return stash = null;
    });
    return it('should define methods', function() {
      var entry;
      entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: ['coffee', 'jse', 'js']
          }
        }
      };
      return ms.call_filters(entry, null, id).then(function(argument) {
        argument.should.be.deep.equal(entry.argument);
        ms.should.have.property('property');
        ms.property.should.be["instanceof"](Function);
        ms.should.have.property('has_property');
        ms.has_property.should.be["instanceof"](Function);
        ms.should.have.property('set_compiled_property');
        ms.set_compiled_property.should.be["instanceof"](Function);
        ms.should.have.property('compiled_property');
        return ms.compiled_property.should.be["instanceof"](Function);
      });
    });
  });

  describe('property call', function() {
    var argument, filter, id, ms, request, stash;
    ms = null;
    request = null;
    id = null;
    stash = null;
    filter = MiyoFilters.property;
    argument = null;
    beforeEach(function() {
      var name;
      ms = new Miyo();
      for (name in MiyoFilters) {
        filter = MiyoFilters[name];
        ms.filters[name] = filter;
      }
      request = sinon.stub();
      id = 'OnTest';
      stash = null;
      return argument = {
        'ok': 'plain',
        'plain': 'plain',
        'ok.js': 'var ret = "js";\nreturn [ret, request, id, stash]',
        'compile_error.js': 'js -=',
        'runtime_error.js': 'js',
        'ng.jse': 'j = "j";\nret = "jse";\n[ret, request, id, stash]',
        'ok.jse': '["jse", request, id, stash]',
        'ok.coffee': 'ret = "coffee"\n[ret, request, id, stash]',
        'block.coffee': 'ret = "coffee"\na = null\nif a?\n	1\nelse\n	[ret, request, id, stash]',
        'skip.js': 'return "js"'
      };
    });
    it('should work with plain', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: []
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        var property;
        property = ms.property(argument, 'ok', request, id, stash);
        return property.should.be.equal('plain');
      });
    });
    it('should work with js', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: ['js']
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        var property;
        property = ms.property(argument, 'ok', request, id, stash);
        return property.should.be.deep.equal(['js', request, id, stash]);
      });
    });
    it('should fail with compile error js', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: ['js']
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        return (function() {
          return ms.property(argument, 'compile_error', request, id, stash);
        }).should["throw"](/property compile error/);
      });
    });
    it('should fail with runtime error js', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: ['js']
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        return (function() {
          return ms.property(argument, 'runtime_error', request, id, stash);
        }).should["throw"](/property execute error/);
      });
    });
    it('should work with jse', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: ['jse']
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        var property;
        property = ms.property(argument, 'ok', request, id, stash);
        return property.should.be.deep.equal(['jse', request, id, stash]);
      });
    });
    it('should work with miss jse', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: ['jse']
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        var property;
        property = ms.property(argument, 'ng', request, id, stash);
        return property.should.be.equal('j');
      });
    });
    it('should work with coffee', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: ['coffee']
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        var property;
        property = ms.property(argument, 'ok', request, id, stash);
        return property.should.be.deep.equal(['coffee', request, id, stash]);
      });
    });
    it('should work with coffee block', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: ['coffee']
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        var property;
        property = ms.property(argument, 'block', request, id, stash);
        return property.should.be.deep.equal(['coffee', request, id, stash]);
      });
    });
    it('should take handler in order', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: ['coffee', 'js']
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        var property;
        property = ms.property(argument, 'ok', request, id, stash);
        property.should.be.deep.equal(['coffee', request, id, stash]);
        property = ms.property(argument, 'skip', request, id, stash);
        property.should.be.deep.equal('js');
        property = ms.property(argument, 'plain', request, id, stash);
        return property.should.be.deep.equal('plain');
      });
    });
    it('should return undefined on not exists', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: []
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        var property;
        property = ms.property(argument, 'dummy', request, id, stash);
        return expect(property).is.undefined;
      });
    });
    it('should work with compiled', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: []
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        var property;
        property = ms.property(argument, 'ok', request, id, stash);
        property.should.be.equal('plain');
        property = ms.property(argument, 'ok', request, id, stash);
        return property.should.be.equal('plain');
      });
    });
    it('should process pre hook object', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: []
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        var pre_hook_handler, property;
        pre_hook_handler = function(property, request, id, stash) {
          return Object.keys(this.filters).length + property + id;
        };
        property = ms.property(argument, 'ok', request, id, stash, {
          'plain': pre_hook_handler
        });
        return property.should.be.equal(Object.keys(ms.filters).length + 'plain' + id);
      });
    });
    it('should process pre hook single', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: []
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        var pre_hook_handler, property;
        pre_hook_handler = function(property, request, id, stash) {
          return Object.keys(this.filters).length + property + id;
        };
        property = ms.property(argument, 'ok', request, id, stash, pre_hook_handler);
        return property.should.be.equal(Object.keys(ms.filters).length + 'plain' + id);
      });
    });
    it('should not process pre hook not match', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: ['js']
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        var pre_hook_handler, property;
        pre_hook_handler = function(property, request, id, stash) {
          return 'dummy';
        };
        property = ms.property(argument, 'skip', request, id, stash, {
          'plain': pre_hook_handler
        });
        return property.should.be.equal('js');
      });
    });
    it('should process pre hook function with attributes', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: ['jse', 'js']
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        var pre_hook, property;
        pre_hook = function(property, request, id, stash) {
          return Object.keys(this.filters).length + property + id;
        };
        pre_hook.jse = function(property, request, id, stash) {
          return "'" + Object.keys(this.filters).length + property + id + 'jse' + "'";
        };
        property = ms.property(argument, 'ok', request, id, stash, pre_hook);
        property.should.be.equal(Object.keys(ms.filters).length + argument['ok.jse'] + id + 'jse');
        property = ms.property(argument, 'plain', request, id, stash, pre_hook);
        return property.should.be.equal(Object.keys(ms.filters).length + 'plain' + id);
      });
    });
    return it('should fail with pre hook error', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: []
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        var pre_hook_handler;
        pre_hook_handler = function(property, request, id, stash) {
          return a;
        };
        return (function() {
          return ms.property(argument, 'ok', request, id, stash, pre_hook_handler);
        }).should["throw"](/property pre_hook execute error/);
      });
    });
  });

  describe('has_property call', function() {
    var argument, filter, id, ms, request, stash;
    ms = null;
    request = null;
    id = null;
    stash = null;
    filter = MiyoFilters.property;
    argument = null;
    beforeEach(function() {
      var name;
      ms = new Miyo();
      for (name in MiyoFilters) {
        filter = MiyoFilters[name];
        ms.filters[name] = filter;
      }
      request = sinon.stub();
      id = 'OnTest';
      stash = null;
      return argument = {
        'all': 'plain',
        'all.js': 'ret = "js";\nreturn [ret, request, id, stash]',
        'all.jse': '["jse", request, id, stash]',
        'all.coffee': 'ret = "coffee"\n[ret, request, id, stash]',
        'jse.jse': '"jse"',
        'js.js': 'return "js"',
        'coffee.coffee': '"coffee"',
        'plain': 'plain'
      };
    });
    it('should work with no handlers', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: []
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        ms.has_property(argument, 'all').should.be["true"];
        ms.has_property(argument, 'plain').should.be["true"];
        return ms.has_property(argument, 'coffee').should.be["false"];
      });
    });
    it('should work with handlers', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: ['js', 'coffee']
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        ms.has_property(argument, 'all').should.be["true"];
        ms.has_property(argument, 'plain').should.be["true"];
        ms.has_property(argument, 'coffee').should.be["true"];
        ms.has_property(argument, 'js').should.be["true"];
        return ms.has_property(argument, 'jse').should.be["false"];
      });
    });
    return it('should work with compiled', function() {
      var initialize_entry;
      initialize_entry = {
        filters: ['property_initialize'],
        argument: {
          property_initialize: {
            handlers: []
          }
        }
      };
      return ms.call_filters(initialize_entry, null, '_load').then(function() {
        ms.property(argument, 'plain', request, id, stash);
        ms.has_property(argument, 'plain').should.be["true"];
        ms.property(argument, 'dummy', request, id, stash);
        return ms.has_property(argument, 'dummy').should.be["false"];
      });
    });
  });

}).call(this);
