// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var CoffeeScript, MiyoFilters, _require;

  if (typeof require !== "undefined" && require !== null) {
    CoffeeScript = require('coffee-script');
    _require = require;
  } else {
    CoffeeScript = this.CoffeeScript;
    _require = this.require;
  }

  if (this.MiyoFilters != null) {
    MiyoFilters = this.MiyoFilters;
  } else {
    MiyoFilters = {};
  }

  MiyoFilters.property_initialize = {
    type: 'through',
    filter: function(argument, request, id, stash) {
      var handlers, property_getter;
      handlers = argument.property_initialize.handlers;
      property_getter = function(property_base, property_with_handler_name, pre_hook, handler_name, request, id, stash) {
        var error, pre_hook_handler, property;
        property = property_base[property_with_handler_name];
        if (pre_hook != null) {
          pre_hook_handler = handler_name in pre_hook ? pre_hook[handler_name] : pre_hook;
          if (pre_hook_handler instanceof Function) {
            try {
              return pre_hook_handler.call(this, property, request, id, stash);
            } catch (_error) {
              error = _error;
              throw "property pre_hook execute error: [" + property_with_handler_name + "]\n" + error;
            }
          } else {
            return property;
          }
        } else {
          return property;
        }
      };
      this.property = function(property_base, property_name, request, id, stash, pre_hook) {
        var compiled_handler_name, compiled_property, compiled_property_name, error, handler, handler_name, property, property_with_handler_name, _i, _len, _ref;
        compiled_property_name = '__' + property_name;
        if (!(compiled_property_name in property_base)) {
          for (_i = 0, _len = handlers.length; _i < _len; _i++) {
            handler_name = handlers[_i];
            property_with_handler_name = property_name + '.' + handler_name;
            if (property_with_handler_name in property_base) {
              property = property_getter.call(this, property_base, property_with_handler_name, pre_hook, handler_name, request, id, stash);
              handler = this.filters.property_handler[handler_name];
              try {
                _ref = handler.call(this, property, request, id, stash), compiled_property = _ref[0], compiled_handler_name = _ref[1];
              } catch (_error) {
                error = _error;
                throw "property compile error: [" + property_with_handler_name + "]\n" + error;
              }
              this.set_compiled_property(property_base, compiled_property_name, compiled_property, compiled_handler_name);
              break;
            }
          }
          if (!(compiled_property_name in property_base)) {
            if (property_name in property_base) {
              property = property_getter.call(this, property_base, property_name, pre_hook, 'plain', request, id, stash);
              this.set_compiled_property(property_base, compiled_property_name, property, 'plain_compiled');
            }
          }
        }
        return this.compiled_property(property_base, compiled_property_name, request, id, stash);
      };
      this.has_property = function(property_base, property_name) {
        var compiled_property_name, handler_name, property_with_handler_name, _i, _len;
        compiled_property_name = '__' + property_name;
        if (compiled_property_name in property_base) {
          return true;
        } else {
          for (_i = 0, _len = handlers.length; _i < _len; _i++) {
            handler_name = handlers[_i];
            property_with_handler_name = property_name + '.' + handler_name;
            if (property_with_handler_name in property_base) {
              return true;
            }
          }
          if (property_name in property_base) {
            return true;
          }
        }
        return false;
      };
      this.set_compiled_property = function(property_base, compiled_property_name, compiled_property, compiled_handler_name) {
        return property_base[compiled_property_name] = {
          property: compiled_property,
          handler: compiled_handler_name
        };
      };
      this.compiled_property = function(property_base, compiled_property_name, request, id, stash) {
        var compiled_handler, compiled_handler_name, compiled_property, compiled_property_container, error;
        if (!(compiled_property_name in property_base)) {
          return;
        }
        compiled_property_container = property_base[compiled_property_name];
        compiled_property = compiled_property_container.property;
        compiled_handler_name = compiled_property_container.handler;
        compiled_handler = this.filters.property_handler[compiled_handler_name];
        try {
          return compiled_handler.call(this, compiled_property, request, id, stash);
        } catch (_error) {
          error = _error;
          throw "property execute error: [" + compiled_property_name + "] with handler [" + compiled_handler_name + "]\n" + error;
        }
      };
      return argument;
    }
  };

  MiyoFilters.property_handler = {};

  MiyoFilters.property_handler.plain_compiled = function(compiled_property, request, id, stash) {
    return compiled_property;
  };

  MiyoFilters.property_handler.js = function(property, request, id, stash) {
    var compiled_property;
    compiled_property = new Function('request', 'id', 'stash', 'require', property);
    return [compiled_property, 'js_compiled'];
  };

  MiyoFilters.property_handler.jse = function(property, request, id, stash) {
    var compiled_property;
    compiled_property = new Function('request', 'id', 'stash', 'require', 'return ' + property);
    return [compiled_property, 'js_compiled'];
  };

  MiyoFilters.property_handler.js_compiled = function(compiled_property, request, id, stash) {
    return compiled_property.call(this, request, id, stash, _require);
  };

  MiyoFilters.property_handler.js.stash = {};

  MiyoFilters.property_handler.coffee = function(property, request, id, stash) {
    var compiled_property;
    compiled_property = eval(CoffeeScript.compile("(request, id, stash, require) -> (" + property + ")", {
      bare: true
    }));
    return [compiled_property, 'js_compiled'];
  };

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = MiyoFilters;
  } else {
    this.MiyoFilters = MiyoFilters;
  }

}).call(this);
