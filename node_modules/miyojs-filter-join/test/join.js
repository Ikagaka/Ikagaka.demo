// Generated by CoffeeScript 1.8.0
(function() {
  var Miyo, MiyoFilters, chai, chaiAsPromised, expect, sinon;

  if (typeof require !== "undefined" && require !== null) {
    chai = require('chai');
  } else {
    chai = this.chai;
  }

  chai.should();

  expect = chai.expect;

  if (typeof require !== "undefined" && require !== null) {
    chaiAsPromised = require('chai-as-promised');
  } else {
    chaiAsPromised = this.chaiAsPromised;
  }

  chai.use(chaiAsPromised);

  if (typeof require !== "undefined" && require !== null) {
    sinon = require('sinon');
    Miyo = require('miyojs');
    MiyoFilters = require('../join.js');
  } else {
    sinon = this.sinon;
    Miyo = this.Miyo;
    MiyoFilters = this.MiyoFilters;
  }

  describe('join', function() {
    var id, ms, request, stash;
    ms = null;
    request = null;
    id = null;
    stash = null;
    beforeEach(function() {
      var filter, name;
      ms = new Miyo();
      for (name in MiyoFilters) {
        filter = MiyoFilters[name];
        ms.filters[name] = filter;
      }
      sinon.spy(ms, 'call_entry');
      request = sinon.stub();
      id = 'OnTest';
      return stash = null;
    });
    it('should return undefined with no argument', function() {
      var entry;
      entry = {
        filters: ['join']
      };
      return ms.call_filters(entry, request, id, stash).should.eventually.undefined;
    });
    it('should return empty string with 0 list', function() {
      var entry;
      entry = {
        filters: ['join'],
        argument: {
          join: []
        }
      };
      return ms.call_filters(entry, request, id, stash).should.eventually.equal('');
    });
    return it('should return joined string with non-zero list', function() {
      var entry;
      entry = {
        filters: ['join'],
        argument: {
          join: ['elem 1', 'elem 2']
        }
      };
      return ms.call_filters(entry, request, id, stash).then(function(ret) {
        ms.call_entry.callCount.should.be.equal(2);
        ms.call_entry.firstCall.calledWith('elem 1').should.be["true"];
        ms.call_entry.secondCall.calledWith('elem 2').should.be["true"];
        return expect(ret).equal('elem 1elem 2');
      });
    });
  });

}).call(this);
