// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var MiyoFilters, Promise, _ref;

  if (typeof Promise === "undefined" || Promise === null) {
    if (typeof require !== "undefined" && require !== null) {
      try {
        Promise = require('es6-promise').Promise;
      } catch (_error) {
        Promise = require('bluebird');
      }
    } else {
      if (this.Promise != null) {
        Promise = this.Promise;
      } else if (((_ref = this.ES6Promise) != null ? _ref.Promise : void 0) != null) {
        Promise = this.ES6Promise.Promise;
      }
    }
  }

  if (this.MiyoFilters != null) {
    MiyoFilters = this.MiyoFilters;
  } else {
    MiyoFilters = {};
  }

  MiyoFilters.join = {
    type: 'data-value',
    filter: function(argument, request, id, stash) {
      var element, promise, _i, _len, _ref1;
      if ((argument != null ? argument.join : void 0) == null) {
        return;
      }
      promise = new Promise(function(resolve, reject) {
        return resolve([]);
      });
      _ref1 = argument.join;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        element = _ref1[_i];
        promise = promise.then(((function(_this) {
          return function(element) {
            return function(values) {
              return _this.call_entry(element, request, id, stash).then(function(value) {
                if (value != null) {
                  values.push(value);
                }
                return values;
              });
            };
          };
        })(this))(element));
      }
      return promise.then(function(values) {
        return values.join('');
      });
    }
  };

  if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
    module.exports = MiyoFilters;
  } else {
    this.MiyoFilters = MiyoFilters;
  }

}).call(this);
